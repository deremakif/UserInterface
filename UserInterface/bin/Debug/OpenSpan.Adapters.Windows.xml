<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenSpan.Adapters.Windows</name>
    </assembly>
    <members>
        <member name="T:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver">
            <summary>
            Singleton class used to receive direct Activity Intelligence events from the injected process.  It will
            be created when the first events-enabled adapter is started
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver.Initialize(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Initialize the receiver service.  This can be called multiple times, but only the
            first call will create and initialize the service object
            </summary>
            <param name="container">The IServiceContainer that contains the IEventDataService</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Private constructor.  In order to implement the singleton pattern, this can 
            only be called from the public static Initialize method
            </summary>
            <param name="container">The IServiceContainer that contains the IEventDataService</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver.OnDataReceived(System.String,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Handler for data received from injected processes.  The data will be serialized into a simple proprietary
            format, detailed below.
            </summary>
            <param name="name">The queue name for which the event is received</param>
            <param name="messagebuffer">The buffer holding the event data</param>
            <param name="messageLength">The length of the buffer</param>
            <param name="answerBuffer">The answer buffer (not used here)</param>
            <param name="answerLength">The answer length (not used here)</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver.AddDataItems(OpenSpan.Server.Events.EventDataArgs,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds the event fields extracted from the serialized stream.  Only a specific set of fields are inserted
            </summary>
            <param name="args">An EventDataArgs object to be filled with event fields.  This will be published by
            the caller upon return</param>
            <param name="kvPairs">A basket of key/value pairs representing the event fields that were 
            extracted from the serialized stream</param>
            <returns>True if all required attributes were found and added successfully.  False if any attribute
            is missing</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver.AddAttribute(System.String,OpenSpan.Server.Events.EventDataArgs,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an event attribute to the EventDataArgs object
            </summary>
            <param name="attributeName">The attribute name to locate and add</param>
            <param name="args">The EventDataArgs object to populate</param>
            <param name="kvPairs">The key/value pairs representing the data</param>
            <returns>True if the specific attribute is found in kvPairs and added.  False if not</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver.AddDimension(System.String,OpenSpan.Server.Events.EventDataArgs,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an event dimension to the EventDataArgs object.  The requested dimension may or may not be
            present in the KV list.  If it is not found, no further action is taken
            </summary>
            <param name="dimensionName">The dimension name to locate and add</param>
            <param name="args">The EventDataArgs object to populate</param>
            <param name="kvPairs">The key/value pairs representing the data</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ActivityIntelligenceEventsReceiver.AddFact(System.String,OpenSpan.Server.Events.EventDataArgs,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an event fact to the EventDataArgs object.  The requested fact may or may not be
            present in the KV list.  If it is not found, no further action is taken
            </summary>
            <param name="factName">The fact name to locate and add</param>
            <param name="args">The EventDataArgs object to populate</param>
            <param name="kvPairs">The key/value pairs representing the data</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Application.Stop(OpenSpan.Adapters.Windows.WindowsProcessStopMethod,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stops the attached process via the passed in method.
            </summary>
            <param name="method"></param>
            <param name="closeTimeout"></param>
            <param name="terminateTimeout"></param>
            <param name="stopChildren"></param>
            <param name="detach"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Application.Stop">
            <summary>
            Stops the process using the ForceCloseThenTerminate method. 
            </summary>
            <remarks>
            For each process monitored by the adapter, OpenSpan sends the message WM_CLOSE to each 
            top-level window in the process and waits up to the 10 seconds for the process to 
            exit.
            
            Additionally, if a process does not exit within the time period, OpenSpan waits up
            to 10 seconds  for the process to exit. When the time period expires, 
            OpenSpan attempts to terminate the process and waits up to the 10 seconds value for
            the process to exit. If the process does not terminate within the 10 seconds it is 
            likely hung, and OpenSpan leaves the process running.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Application.LaunchProgram(System.String,System.String,System.String)">
            <summary>
            This is a convenience method for starting a program.  The process that is created is not injected directly. 
            If it a process being watched by the driver, or is a branded program, then it will be injected by those methods
            </summary>
            <param name="path">The program to start.  This can be a fully qualified path name, relative path or file name (if
            the program to be run is in the current path).  If an executable file is specified (.exe), then
            the program is launched.  If a non-executable file is specified (.txt, .doc, etc), then the associated program
            is used to open the file (notepad, MS Word, etc.) </param>
            <param name="arguments">Optional command line arguments to pass to the process</param>
            <param name="workingDirectory">An optional working directory</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Application.Hide">
            <summary>
            Hides the process.
            </summary>        
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Application.Show">
            <summary>
            Show the application
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Application.GetKeyInstance(OpenSpan.Design.Key)">
            <summary>
            Gets the unique Key instance for the application.
            </summary>
            <param name="key"></param>
            <returns>the IComponent representing the key</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Application.GetKeyInstance(System.String,System.Object)">
            <summary>
            Gets the unique Key instance for the application.
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns>the IComponent representing the key</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Controls.ControlRegion">
            <summary>
            Represents a Windows control area.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.ClickEvent">
            <summary>
            Defines a key for storing the delegate for the Click event in the Events list.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.DoubleClickEvent">
            <summary>
            Defines a key for storing the delegate for the DoubleClick event in the Events list.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.ClickingEvent">
            <summary>
            Defines a key for storing the delegate for the Clicking event in the Events list.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.DoubleClickingEvent">
            <summary>
            Defines a key for storing the delegate for the DoubleClicking event in the Events list.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.RightClickEvent">
            <summary>
            Defines a key for storing the delegate for the RightClick event in the Events list.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.RightClickingEvent">
            <summary>
            Defines a key for storing the delegate for the RightClicking event in the Events list.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.MouseUpEvent">
            <summary>
            Defines a key for storing the delegate for the MouseUp event in the Events list.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Controls.ControlRegion.MouseDownEvent">
            <summary>
            Defines a key for storing the delegate for the MouseDown event in the Events list.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.Click">
            <summary>
            Occurs when the control is clicked. 
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.Clicking">
            <summary>
            Occurs before the control is clicked. 
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.DoubleClick">
            <summary>
            Occurs when the control is double-clicked. 
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.DoubleClicking">
            <summary>
            Occurs before the control is double-clicked. 
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.RightClick">
            <summary>
            Occurs when the control is right-clicked. 
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.RightClicking">
            <summary>
            Occurs before the control is right-clicked. 
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.MouseUp">
            <summary>
            Fires when the user releases a mouse button while the mouse is over the control.
            </summary>
            <remarks>
            You can determine which mouse button was used by looking at the event's <b>Button</b> property.
            </remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Controls.ControlRegion.MouseDown">
            <summary>
            Fires when the user presses a mouse button while the mouse is over the control.
            </summary>
            <remarks>
            You can determine which mouse button was used by looking at the event's <b>Button</b> property.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Controls.ControlRegion.UseDirectText">
            <summary>
            Set to true to use the direct method of GDI capture. Set to false to use the cached text method.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Controls.ControlRegion.Rectangle">
            <summary>
            Gets or sets the size and location of the specified controls rectangle.
            </summary>
            <value>A Rectangle that represents the converted Rectangle, p, in screen coordinates.</value>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Controls.ControlRegion.Selected">
            <summary>
            Gets or sets a value indicating whether the control is selected.
            </summary>
            <value><see langword="true"/> if the control is selected; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Controls.ControlRegion.Text">
            <summary>
            Gets or sets the text associated with this control. 
            </summary>
            <value> The text associated with this control.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Controls.ControlRegion.PerformClick">
             <summary>
            Raises the Click event.
             </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Controls.ControlRegion.PerformClick(System.Int32,System.Int32)">
            <summary>
            Raises the click event at the given location.
            </summary>
            <param name="x">The x-coordinate of this Point. </param>
            <param name="y">The y-coordinate of this Point.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Controls.ControlRegion.PerformDoubleClick">
             <summary>
            Raises the DoubleClick event.
             </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Controls.ControlRegion.PerformDoubleClick(System.Int32,System.Int32)">
            <summary>
            Raises the DoubleClick event at the given location.
            </summary>
            <param name="x">The x-coordinate of this Point. </param>
            <param name="y">The y-coordinate of this Point.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Controls.ControlRegion.Clone">
            <summary>
            Creates a new <see cref="T:OpenSpan.Adapters.Windows.Controls.ControlRegion"/> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:OpenSpan.Adapters.Windows.Controls.ControlRegion"/> that is a copy of this instance.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Controls.ControlRegionSet">
            <summary>
            A set of <see cref="P:OpenSpan.Adapters.Windows.Controls.ControlRegionSet.ControlRegionList"/>
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Controls.ControlRegionSet.ControlRegionList">
            <summary>
            Gets or sets a <see cref="P:OpenSpan.Adapters.Windows.Controls.ControlRegionSet.ControlRegionList">list of control regions</see> in a control.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Controls.ControlRegionSet.Parent">
            <summary>
            Gets or sets the parent <see cref="T:OpenSpan.Adapters.ControlBase"/> for this set.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Controls.ControlRegionSet.Count">
            <summary>
            Get the number of items in the set.
            </summary>
            <value>The number of items in the set indicates success.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Controls.ControlRegionSet.Add(OpenSpan.Adapters.Windows.Controls.ControlRegion)">
            <summary>
            Add a new <see cref="T:OpenSpan.Adapters.Windows.Controls.ControlRegion"/> to the current set.
            </summary>
            <param name="item">The <see cref="T:OpenSpan.Adapters.Windows.Controls.ControlRegion"/> to add.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Controls.ControlRegionSet.Clone">
            <summary>
            Creates a new <see cref="T:OpenSpan.Adapters.Windows.Controls.ControlRegionSet"/> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:OpenSpan.Adapters.Windows.Controls.ControlRegionSet"/> that is a copy of this instance.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Controls.ControlRegionList">
            <summary>
            An <see cref="T:System.Collections.IList"/> of <see cref="T:OpenSpan.Adapters.Windows.Controls.ControlRegion"/>
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.DotNetHelper.IsDotNetClassName(System.String,System.String@)">
            <summary>
            Tests if the string is a dot net class name
            </summary>
            <param name="className">Class name to test.</param>
            <returns>True, if the string is a dot net class name.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.DotNetHelper.GetDotNetControlName(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Gets the dot net control name.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.DotNetHelper.GetDotNetControlType(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Gets the dot net control type.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.ExcludedProcessList">
            <summary>
            Provides a list of processes and/or command lines that can be used to determine
            if a process should be excluded from something.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessList.IsExcluded(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Returns whether the given process is contained in this exclusion list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessList.ExcludeProcessByName(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Adds the specified process to this exclusion list by it's name.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessList.ExcludeProcessByCommandLine(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Adds the specified process to this exclusion list by it's command line.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessList.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:OpenSpan.Adapters.Windows.ExcludedProcessList"/> is equal 
            to the current <see cref="T:OpenSpan.Adapters.Windows.ExcludedProcessList"/>.
            </summary>
            <remarks>
            This override was required so that we could set a <see cref="T:System.ComponentModel.DefaultValueAttribute"/>
            on properties of this type. See ExcludedProcessListTypeConverter for
            more info.
            </remarks>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.ExcludedProcessListTypeConverter">
            <summary>
            Type converter for the <see cref="T:OpenSpan.Adapters.Windows.ExcludedProcessList"/> class.  This exists
            to provide more user friendly text in property grids, and to provide basic
            type conversion from an empty string (to ensure that a ExcludedProcessList property
            is not bold if it's the default value).
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessListTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Override of CanConvertFrom which allows a string to be converted to an
            <see cref="T:OpenSpan.Adapters.Windows.ExcludedProcessList"/>.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessListTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Override of ConvertFrom which will convert an empty string to an empty 
            <see cref="T:OpenSpan.Adapters.Windows.ExcludedProcessList"/>.  This allows us to specify the following
            attribute on a property to give it a default value for property grids:
            	[DefaultValue(typeof(ExcludedProcessList), "")]
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessListTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Override of ConvertFrom which will allow conversion of the class
            to a string.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ExcludedProcessListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Override of ConvertTo which provides more user friendly text for 
            <see cref="T:OpenSpan.Adapters.Windows.ExcludedProcessList"/> properties in property grids.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.HttpEventService">
            <summary>
            Publishes Http events intercepted by Wininet hooks.
             </summary>
            <remarks>These hooks are may be turned off or filtered in the openspan.ini</remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.HttpEventService.OnEventReceived">
            <summary>
            Fired when an http request is made.  
            Contains relevant information about that request.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.HttpEventService.#ctor(System.IServiceProvider)">
            <summary>
            Creates an instance of HttpEventService
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:OpenSpan.Adapters.Windows.ICustomMessageHandler" -->
        <member name="M:OpenSpan.Adapters.Windows.ICustomMessageHandler.ParseMessage(System.Windows.Forms.Message@,System.Boolean,OpenSpan.Adapters.IdleChange@)">
            <summary>
            Parses the Message, using the LParam as the pointer to the message contents or as the
            message itself
            </summary>
            <param name="message">A System.Windows.Forms.Message that contains the information required</param>
            <param name="queueing">True if matching is currently in progress, which will result in this
            message being queued.  Queued messages should not be added to active target hierarchies, as this
            can affect matching.  If queueing is false, this message should be fully handled right now</param>
            <param name="change"></param>
            <returns>The parsed message contents as an untyped object, if the message can be parsed.  If the message
            is not one that is understood by the parser, null is returned.  If queueing is true and the message
            could be parsed, the parsed message data will be added to the Process message queue along 
            with this Window target</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ICustomMessageHandler.ProcessDequeuedMessage(System.Object,OpenSpan.Adapters.IdleChange@)">
            <summary>
            When the Process is dequeueing queued custom messages, this method is called if the Window provides
            this interface.  Messages should be handled in full by this method
            </summary>
            <param name="messageData">The parsed message produced by ParseCustomMessage</param>
            <param name="change"></param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.InvocationThread.Name">
            <summary>
            Gets or sets the name of this thread.  This name can be used during debugging,
            as it will show in the Threads Debug Window when debugging in Visual Studio.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.InvocationThread.InvocationForm.OnHandleCreated(System.EventArgs)">
            <summary>
            Override of OnHandleCreated from Systems.Windows.Forms.Form.  This needs to be overriden to
            prevent subscription to the UserPreferenceChange event in the base
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.InvocationThread.InvocationForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes window messages and passes them to the listener if necessary.
            </summary>
            <param name="m">Message structure.</param>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.IRectangleContainer">
            <summary>
            Summary description for IRectangleContainer.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.IWindow">
            <summary>
            Interface for window classes.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.CreationCharacterSet">
            <summary>
            Returns the character set of the window when it was created.
            Determined by whether the window was create using an ANSI
            function such as CreateWindowExA or an Unicode function such
            as CreateWindowExW.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.CharacterSet">
            <summary>
            Returns the character set of the window. Windows determines
            this by examining whether the last wndproc function was set
            with SetWindowLongA or SetWindowLongW.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.ControlId">
            <summary>
            Numeric identifier for the control.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.CreateSequence">
            <summary>
            The index at which this window was added to its parent.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.ExtendedStyle">
            <summary>
            Get the extended style value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.Handle">
            <summary>
            Window handle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.IsDestroying">
            <summary>
            Returns true if this window or one of it's parent windows is being destroyed.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.IsForeground">
            <summary>
            Returns true if window is in the foreground and visible.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.Parent">
            <summary>
            Window parent.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.ParentHandle">
            <summary>
            Window parent handle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.Process">
            <summary>
            Process that contains the window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.RealWindowClassName">
            <summary>
            Real window class name if available.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.Style">
            <summary>
            Style value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.WindowClassName">
            <summary>
            Window class name.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.WindowType">
            <summary>
            Window type.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.Windows">
            <summary>
            List of child windows.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindow.IsCreatedByChild">
            <summary>
            Indicates if the window was created from a child window prior to creation notification
            from the parent.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowCharacterSet">
            <summary>
            Values indicating the character set for the control.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowCharacterSet.ANSI">
            <summary>
            ANSI character set (7/8-bit characters)
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowCharacterSet.Unicode">
            <summary>
            Unicode characer set (16-bit characters)
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowType">
            <summary>
            Window type
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowType.Child">
            <summary>
            Child of a MdiChild, Form, or Dialog (buttons, labels, etc)
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowType.Form">
            <summary>
            A window containing other controls
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowType.Dialog">
            <summary>
            A popup dialog
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowType.MdiChild">
            <summary>
            A form within an MDI application
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsMessageEventArgs">
            <summary>
            Event args for window message events.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsMessageEventArgs.#ctor(OpenSpan.Adapters.Windows.IWindowsMessage,OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Creates new event args.
            </summary>
            <param name="message"></param>
            <param name="window"></param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsMessageEventArgs.WindowsMessage">
            <summary>
            Gets the window message associated with the event.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsContextMenuEventArgs">
            <summary>
            Event args for context menu events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsMessageEventHandler">
            <summary>
            Delegate for window message events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.CustomMessageEventHandler">
            <summary>
            Delegate for message events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsContextMenuEventHandler">
            <summary>
            Delegate for context menu events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.IWindowCloser">
            <summary>
            Any target factory that needs to participate in the closing of top-level windows implements this
            interface.  When a WindowsProcess closes its top-level windows as part of shutting down, it will
            check every registered target factory for this interface.  Each target factory implementing this
            interface will have its CloseTopLevelWindows method called.  If the target factory closes the
            windows, it returns true.  If not, it returns false.  If every target factory implementing this
            interface returns false, the default close logic is used.
            This functionality was initially added for SAP, since its top-level windows have to be closed
            in a certain order (sessions first, then login).  It was made more generic so that future
            target factories might also be able to do this
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowCloser.CloseTopLevelWindows(System.IntPtr[],System.Boolean)">
            <summary>
            Method called by WindowsProcess when it wishes to close all top-level windows
            </summary>
            <param name="windows">An array of top-level window handles to close</param>
            <param name="force">If set to true, WM_CLOSE will be posted to the window.  If set to false,
            WM_SYSCOMMAND with SC_CLOSE is sent to the window.  This is analagous to clicking the X on the
            title bar</param>
            <returns>True, if the implementor opted to close the windows, false if not</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactory.ModuleName">
            <summary>
            Gets the name of the module supported by the window factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactory.MinimumVersion">
            <summary>
            Gets the minimum version of the module supported by the window factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactory.MaximumVersion">
            <summary>
            Gets the maximum version of the module supported by the window factory.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowFactory.CreateWindow(System.IntPtr)">
            <summary>
            Creates a window from the hwnd.
            </summary>
            <param name="hwnd">Hwnd to create window for.</param>
            <returns>Window.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowFactory.Initialize(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Initializes the factory after it has been added to the process.
            </summary>
            <param name="process">Process associated with the factory.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactoryConfiguration.Type">
            <summary>
            Gets the factory type.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactoryConfiguration.Assembly">
            <summary>
            Gets the factory assembly.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactoryConfiguration.ModuleName">
            <summary>
            Gets the name of the module supported by the window factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactoryConfiguration.MinimumVersion">
            <summary>
            Gets the minimum version of the module supported by the window factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowFactoryConfiguration.MaximumVersion">
            <summary>
            Gets the maximum version of the module supported by the window factory.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowFactoryConfiguration.CreateWindowFactory">
            <summary>
            Creates the window factory.
            </summary>
            <returns>Window factory.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.IWindowsAdapter">
            <summary>
            Interface for classes that interact with external windows applications.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsAdapter.Processes">
            <summary>
            Gets the complete list of attached processes.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsAdapter.IdleTimeout">
            <summary>
            Gets or sets the number of milliseconds a process should wait 
            for messages before raising the Idle event.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsAdapter.WindowsDictionary">
            <summary>
            Gets a dictionary containing windows that have been created under all processes
            within the adapter.  These are windows that have been fully processed and parented
            under the window they belong to.  This will contain all windows that are contained
            in <see cref="P:OpenSpan.Adapters.Windows.IWindowsAdapter.CreatedWindowsDictionary"/> minus those that have been enqueued for 
            processing by windows processes.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsAdapter.CreatedWindowsDictionary">
            <summary>
            Gets a dictionary containing all windows that have been created under all processes
            within the adapter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.ContainsProcess(System.Int32)">
            <summary>
            Returns whether the process id specified is monitored by the adapter.
            </summary>
            <param name="processId">Process Id</param>
            <returns>true if the process is monitored, false if not.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.GetProcessById(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.GetWindow(System.IntPtr)">
            <summary>
            Gets a window by handle.
            </summary>
            <param name="hwnd">Handle of window.</param>
            <returns>Window.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.ExcludesProcess(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Returns whether the given process is to be excluded from hooking.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.WindowGotFocus(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Notfies the adapter that one of its windows got focus.
            </summary>
            <param name="window">The window which got focus</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.WindowLostFocus(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Notfies the adapter that one of its windows lost focus.
            </summary>
            <param name="window">The window which lost focus</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.GetSelectedReparentedWindow">
            <summary>
            Returns the handle of the window currently in focus in reparent mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsAdapter.OnHideableWindowCreated(System.Windows.Forms.Message@)">
            <summary>
            Handles the creation of a hideable window in reparenting mode by determining whether the
            window or its parent is currrently in focus (active in the reparenting container).
            </summary>
            <param name="m"></param>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsAdapter.ProcessCreated">
            <summary>
            Raised when a process is attached.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsAdapter.ProcessDestroyed">
            <summary>
            Raised when a process is detached.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsAdapter.WindowCreated">
            <summary>
            Raised when a window is created.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsAdapter.WindowDestroyed">
            <summary>
            Raised when a window is destroyed.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowEventArgs">
            <summary>
            Event args for window created and window destroyed events.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowEventArgs.#ctor(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Creates new event args and assigns window to Window property.
            </summary>
            <param name="window">Created window.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowEventArgs.Window">
            <summary>
            Gets the window associated with the event.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowEventHandler">
            <summary>
            Delegate for window events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsProcessEventArgs">
            <summary>
            Event args for process events.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessEventArgs.#ctor(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Creates new process event args.
            </summary>
            <param name="process">Windows process.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessEventArgs.Process">
            <summary>
            Gets the windows process for the event.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsProcessEventHandler">
            <summary>
            Delegate for process events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsModuleEventArgs">
            <summary>
            Event args for process module events.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleEventArgs.#ctor(OpenSpan.Adapters.Windows.IWindowsProcess,OpenSpan.Adapters.Windows.IWindowsModule)">
            <summary>
            Creates new module event args.
            </summary>
            <param name="process">Windows process.</param>
            <param name="module">Windows process module.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleEventArgs.Module">
            <summary>
            Gets the windows module for the event.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsModuleEventHandler">
            <summary>
            Delegate for process module events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.CustomIpcMessageEventHandler">
            <summary>
            Delegate for custom ipc message events.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.IWindowsMessage">
            <summary>
            An IMonitor produces IWindowMessage objects when
            when it receives WM_OS_INTERCEPT messages from the target application.
            The IMonitor translates the raw WM_OS_INTERCEPT messages into
            IWindowMessage objects and marshals any necessary structures into the
            WParam and LParam properties.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.Hwnd">
            <summary>
            Handle of window the message was sent to.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.ModifierKeys">
            <summary>
            The modifier keys at the time of the message.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.Msg">
            <summary>
            Id of message.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.WParamIpcPtr">
            <summary>
             WParam IPC pointer value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.WParamPtr">
            <summary>
            WParam pointer value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.WParam">
            <summary>
            Translated wparam value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.LParamIpcPtr">
            <summary>
             WParam IPC pointer value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.LParamPtr">
            <summary>
            LParam pointer value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.LParam">
            <summary>
            Translated lparam value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.Cancel">
            <summary>
            Return true to prevent the message from being sent to the target window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.IsInput">
            <summary>
            Returns true if the message is an input message.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.LResult">
            <summary>
            If cancel is set to true for a received message, the result is returned
            to the message filter. Otherwise, the result is the message return value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsMessage.Received">
            <summary>
            Gets a value indicating when the message was received.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.IWindowsModule">
            <summary>
            Interface for windows process modules.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsModule.BaseAddress">
            <summary>
            Gets the base address of the module.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsModule.EntryPoint">
            <summary>
            Gets the entry point of the module.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsModule.FileName">
            <summary>
            Gets the module file name.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsModule.FileVersion">
            <summary>
            Gets the module file version.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsModule.Handle">
            <summary>
            Gets the module handle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsModule.MemorySize">
            <summary>
            Gets the size of the module in memory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsModule.Process">
            <summary>
            Gets the windows process for the module.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.IWindowsProcess">
            <summary>
            Interface for windows processes.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.ServiceProvider">
            <summary>
            Gets the service provider for the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Adapter">
            <summary>
            Get the adapter that contains the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Handle">
            <summary>
            Gets the process handle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.HasExited">
            <summary>
            Gets a boolean indicating if the process has exited.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Modules">
            <summary>
            Gets a list of modules in the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Parent">
            <summary>
            Gets the parent process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Path">
            <summary>
            Gets the executable path of the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Processes">
            <summary>
            Gets a list of child processes.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.SubProcesses">
            <summary>
            Gets all sub processes contain in the process tree under this process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Windows">
            <summary>
            Gets the list of child windows for the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.HideApplication">
            <summary>
            Gets or sets whether the application should be hidden at runtime.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.HookChildProcesses">
            <summary>
            Gets or sets whether child processes should be monitored.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.InjectSuspended">
            <summary>
            Gets or sets whether injecting into Suspended process (such started by WinDbg)
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.HookConsole">
            <summary>
            Gets or sets whether to check if console is available for hooking.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:OpenSpan.Adapters.Windows.IWindowsProcess.SuppressForegroundWindows" -->
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.ReparentApplication">
            <summary>
            Gets or sets whether the application should be reparented at runtime.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.Is64Bit">
            <summary>
            Returns true if this is a native 64 bit process, or false if this is a Wow64 process (64 bit Windows)
            or a native 32 bit process (32 bit Windows)
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.CommandLine">
            <summary>
            Gets the command line of the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.IWindowsProcess.ResponseWindow">
            <summary>
            Returns the response window handle
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.GetWindow(System.IntPtr)">
            <summary>
            Gets a window by hwnd.
            </summary>
            <param name="hwnd">Hwnd of window to retrieve.</param>
            <returns>Window.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.GetWindowOrEnqueuedWindow(System.IntPtr)">
            <summary>
            Gets a saved or enqueued window by hwnd.
            </summary>
            <param name="hwnd">Hwnd of window to retrieve.</param>
            <returns>Window.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenSpan.Adapters.Windows.IWindowsProcess.GetEnqueuedCreatedWindows" -->
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.Start(OpenSpan.Adapters.Windows.WindowsProcessStartMethod,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Starts a process with the supplied path, arguments and directory.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.Stop(OpenSpan.Adapters.Windows.WindowsProcessStopMethod,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stops the process.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.Terminate">
            <summary>
            Forces the process to terminate now.  The <see cref="M:OpenSpan.Adapters.Windows.IWindowsProcess.Stop(OpenSpan.Adapters.Windows.WindowsProcessStopMethod,System.Int32,System.Int32,System.Boolean,System.Boolean)"/> method should normally
            be used to shut down the process gracefully.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.RaiseException(System.Exception)">
            <summary>
            Raises an exception on the process thread.
            </summary>
            <param name="ex">Exception to raise.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.ResetIdle(OpenSpan.Adapters.IdleChange)">
            <summary>
            Resets the process idle state.  This is useful for controls that do not have Window messages directly
            associated with their creation, destruction or general behavior
            </summary>
            <param name="change">IdleChange parameter that describes what type of event was received.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.CreateTarget(System.Type,OpenSpan.Adapters.ITarget)">
            <summary>
            Queries all of the loaded factories and returns the first created target.
            </summary>
            <param name="targetType">Type of target to create.</param>
            <param name="defaultTarget">The default target created by the default factory.</param>
            <returns>Newly created target.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.RegisterTargetFactory(OpenSpan.Adapters.ITargetFactory)">
            <summary>
            Registers the specified target factory with this Windows Process.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.UnregisterTargetFactory(OpenSpan.Adapters.ITargetFactory)">
            <summary>
            Unregisters the specified target factory with this Windows Process.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWindowsProcess.RegisterOleMessageFilter">
            <summary>
            Calls on the MonitorThread's RegisterOleMessageFilter implementation which
            manages the lifetime of the registration within the invocation context.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsProcess.Created">
            <summary>
            Raised when the process starts.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsProcess.Destroyed">
            <summary>
            Raised when the process exits.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsProcess.Idle">
            <summary>
            Raised when the adapter is idle.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsProcess.ModuleLoaded">
            <summary>
            Raised when a module is loaded dynamically.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsProcess.ChildProcessCreated">
            <summary>
            Raised when a child process is attached.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsProcess.WindowCreated">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.IWindowsProcess.WindowDestroyed">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsProcessStopMethod">
            <summary>
            Enumeration of methods in which a process may be stopped.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStopMethod.None">
            <summary>Detaches from the process, but does not destroy it</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStopMethod.ForceClose">
            <summary>Posts WM_CLOSE to top-level windows</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStopMethod.SimulateClose">
            <summary>Posts WM_SYSCOMMAND/SC_CLOSE to top-level windows and terminates if timeout</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStopMethod.ForceCloseThenTerminate">
            <summary>Posts WM_CLOSE to top-level windows</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStopMethod.SimulateCloseThenTerminate">
            <summary>Posts WM_SYSCOMMAND/SC_CLOSE to top-level windows and terminates it timeout</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStopMethod.Terminate">
            <summary>Terminates the process without attempting to close any windows</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStartMethod.Start">
            <summary>Starts the process</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStartMethod.StartAndWait">
            <summary>Starts a shim process and waits for the process to be created</summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsProcessStartMethod.MonitorAll">
            <summary>Monitors all instances of the process that are created</summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.IWndProc.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Windows message processing function.
            </summary>
            <param name="m">Message to process.</param>
            <returns>True, if message was handled. False, otherwise.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.AfxClassNameMatchRule">
            <summary>
            Default match rule used to match applications which use MFC classes.
            Matching is based on the MFC Class as identified by the AFX parameter.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.AfxClassNameMatchRule.AfxStyle">
            <summary>
            Gets or sets the Class Name for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="T:System.String"/> value representing the class name.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.AfxClassNameMatchRule.IsAfxClassName(System.String)">
            <summary>
            Determines if the className matches the control's class name based on the TextMode.
            </summary>
            <param name="className">Class name to check.</param>
            <returns>True, if the string is a dot net class name.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.AfxClassNameMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.AfxClassNameMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.BaseClassNameMatchRule">
            <summary>
            Used to match Windows objects based on their ClassName property.
            </summary>
            <remarks>The match is case insensitive.</remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.BaseClassNameMatchRule.BaseClassName">
            <summary>
            Gets or sets the Base Class Name for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="T:System.String"/> value representing the base class name.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.BaseClassNameMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.BaseClassNameMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule">
            <summary>
            Matches based on what type of button the control is.
            Used when the Control ID or Control Name (.NET) and Window Text match rules
            do not uniquely identify any of the following targets:
            
               Buttons,
               Checkboxes,
               Group boxes,
               Radio buttons.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.Style">
            <summary>
            Gets or sets the <see cref="T:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle"/> for this match rule.
            </summary>
            <value>A value representing the <see cref="T:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle"/></value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle">
            <summary>
            Specifies the button style of a control.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle.Button">
            <summary>
            Represents a Windows <see cref="F:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle.Button"/> control
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle.CheckBox">
            <summary>
            Represents a Windows <see cref="F:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle.CheckBox"/> control
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle.GroupBox">
            <summary>
            Represents a Windows <see cref="F:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle.GroupBox"/> control
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.MatchRules.ButtonStyleMatchRule.ButtonStyle.Radio">
            <summary>
            Represents a Windows <see cref="T:OpenSpan.Adapters.Controls.RadioButton"/> control
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ClassNameMatchRule">
            <summary>
            Used to match Microsoft Windows application objects such as textboxes, buttons etc.
            The main property for this match rule is ClassName which
            gets or sets the Class Name for the Match Rule.  
            </summary>
            <example>The Class Name for Calc.exe in scientific mode is "SciCalc”.</example>
            <remarks>The class name is case-insensitive.</remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.ClassNameMatchRule.ClassName">
            <summary>
            Gets or sets the Class Name for the <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="T:System.String"/> value representing the class name.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ClassNameMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ClassNameMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ControlIdMatchRule">
            <summary>
            Default match rule used along with the Window Class Name and Window Text match rule to 
            match Microsoft Windows application objects such as Windows, buttons, textboxes, checkboxes, etc. 
            This match rule is used by OpenSpan Studio if a dialog ID is assigned to the target (other than the hWnd value).
            </summary>
            <remarks>
            The main property for this match rule is
            <b>ControlId</b>: Gets or sets the dialog Id for the match rule.
            </remarks>
            <example>Example ControlID for the M+button in the Calc.exe is "116”.</example>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.ControlIdMatchRule.ControlId">
            <summary>
            Gets or sets the control Id for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="T:System.Int32"/> value representing control Id for this control.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ControlIdMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ControlIdMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.CreateSequenceMatchRule">
            <summary>
            Used to match windows controls based on
            the order in which they are created in the application as represented by the
            CreateSequence property.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.CreateSequenceMatchRule.CreateSequence">
            <summary>
            Gets or sets the created sequence for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="T:System.Int32"/> value representing when this <see cref="!:WindowsControl"/> was created.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.CreateSequenceMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.CreateSequenceMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.DotNetClassNameMatchRule">
            <summary>
            Used to match .NET objects based on the classname.
            </summary>
            <remarks>
            The main property for this match rule is:
            
            <b>DotNetClassName</b>:  Gets or sets the Class Name for the match rule.     
            </remarks>
            <example>The CRM Login button uses this match rule with the DotNetClassName of "BUTTON”.</example> 
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.DotNetClassNameMatchRule.DotNetClassName">
            <summary>
            Gets or sets the .Net Class Name for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="T:System.String"/> value representing the .Net class name.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.DotNetClassNameMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.DotNetClassNameMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.DotNetControlNameMatchRule">
             <summary>
             Used along with the .NET Class Name and Window Text match rule to match .NET application
             objects such as Windows, buttons, textboxes, checkboxes, etc.
             </summary>
            <remarks>
             The main property for this match rule is:
             
             <b>Text</b>: Gets or sets the .NET Control Name for the match rule.
             </remarks>
             <example>The CRM Login Button has .NET Control Name: btnLogin.</example>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.DotNetControlNameMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Returns true if the window matches this match rule.
            </summary>
            <param name="target"><see cref="T:OpenSpan.Adapters.ITarget"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.DotNetControlNameMatchRule.Initialize(OpenSpan.Adapters.IControl,OpenSpan.Adapters.ITarget)">
            <summary>
            Sets the default values for the match rule.
            </summary>
            <param name="target">Target from which to derive default values.</param>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.DotNetControlTypeMatchRule">
            <summary>
            Used along with the .NET Class Name and Window Text match rule to match
            .NET application objects such as Windows, buttons, textboxes, checkboxes, etc.
            </summary>
            <remarks>
            The main property for this match rule is:
            
            <b>Control</b>: Gets or sets the .NET Control Type for the match rule. 
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.DotNetControlTypeMatchRule.ControlType">
            <summary>
            Gets or sets the .Net Control Type for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="T:System.String"/> value representing the .Net Control name.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.DotNetControlTypeMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.DotNetControlTypeMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule">
            <summary>
            Enables you to match a control based on a label near it.
            For example, an empty textbox has a label to the right of it with text Firstname.
            The control label on the textbox can be used for matching when the label text 
            to the right is Firstname.
            
            Both the label's text and its position relative to the control are used to determine the match.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.Text">
            <summary>
            The text of the label to match.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.Location">
            <summary>
            The location of the label to match, relative to the control.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.Tolerance">
            <summary>
            The distance, in pixels, to search for a label.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.SearchLabelsOnly">
            <summary>
            If true, only labels will be searched. Otherwise all controls will be searched.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.LocationMode">
            <summary>
            Indicates where the label is in relation to the matched control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.LocationMode.Left" -->
        <!-- Badly formed XML comment ignored for member "F:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.LocationMode.Above" -->
        <!-- Badly formed XML comment ignored for member "F:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.LocationMode.Below" -->
        <!-- Badly formed XML comment ignored for member "F:OpenSpan.Adapters.Windows.MatchRules.LabelMatchRule.LocationMode.Right" -->
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.MenuItemIdMatchRule">
            <summary>
            Used to match menu options based on the MenuItemID property.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.MenuItemIdMatchRule.Initialize(OpenSpan.Adapters.IControl,OpenSpan.Adapters.ITarget)">
            <summary>
            Sets the default values for the match rule.
            </summary>
            <param name="control">Object from which to derive default values.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.MenuItemIdMatchRule.MenuItemId">
            <summary>
            Gets or sets the menu <see cref="!:Id"/> for this match rule.
            </summary>
            <value>A value representing the menu item's Id</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.MenuItemIdMatchRule.Initialize(OpenSpan.Adapters.ITarget)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="target"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.MenuItemIdMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Returns true if the window matches this match rule.
            </summary>
            <param name="target"><see cref="T:System.Object"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.MenuItemPathMatchRule">
            <summary>
            Used to match menu options based on the Path property. For example: View/Comments Ctrl+M.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.MenuItemPathMatchRule.Initialize(OpenSpan.Adapters.IControl,OpenSpan.Adapters.ITarget)">
            <summary>
            Sets the default values for the match rule.
            </summary>
            <param name="control">Object from which to derive default values.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.MenuItemPathMatchRule.Path">
            <summary>
            Gets or sets the menu math for this match rule.
            </summary>
            <value>A value representing the menu path</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.MenuItemPathMatchRule.Initialize(OpenSpan.Adapters.ITarget)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="target"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.MenuItemPathMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Returns true if the window matches this match rule.
            </summary>
            <param name="target"><see cref="T:System.Object"/> to match.</param>
            <returns><see langword="true"/>if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ModuleNameMatchRule">
            <summary>
            Matches based on the application's module name.
            </summary>
            <remarks>This is not the same as the Process Name.</remarks>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ModuleNameMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            True if the text and its mode matches the module name
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ModuleVersionMatchRule">
            <summary>
            Matches based on the module's version number.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ModuleVersionMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.ITarget"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.ITarget"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.PositionMatchRule">
            <summary>
            Used to match Windows application objects based on the Left property (X) and
            the Top property (Y) within the application.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.PositionMatchRule.Point">
            <summary>
            Gets or sets the position for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="P:OpenSpan.Adapters.Windows.MatchRules.PositionMatchRule.Point"/> value representing the control's Position.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.PositionMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.PositionMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ProcessCommandLineMatchRule">
            <summary>     
            Enables you to select a process based on the command line arguments or
            attributes with which the process is launched.
            </summary>
            <example>For a command line of <i>notepad.exe letter.txt</i>, the argument is letter.txt</example>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ProcessCommandLineMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.ITarget"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.ITarget"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ProcessNameMatchRule">
            <summary>
            Used to match processes based on their process name as listed in Task Manager.
            </summary>
            <remarks>The process name is case-insensitive.</remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.ProcessNameMatchRule.ProcessName">
            <summary>
            Name of the process to match, such as IExplore.  This is case-insensitive.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ProcessNameMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.ITarget"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.ITarget"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ToolBarButtonIdMatchRule">
            <summary>
            Used to match a button target based on the toolbar button's ID.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ToolBarButtonIdMatchRule.Initialize(OpenSpan.Adapters.IControl,OpenSpan.Adapters.ITarget)">
            <summary>
            Sets the default values for the match rule.
            </summary>
            <param name="control">Object from which to derive default values.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.ToolBarButtonIdMatchRule.ButtonId">
            <summary>
            Gets or sets the <see cref="T:System.Int32"/> representing the toolbar button for this match rule.
            </summary>
            <value>A value representing the <see cref="T:System.Int32"/></value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ToolBarButtonIdMatchRule.Initialize(OpenSpan.Adapters.ITarget)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="target"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.ToolBarButtonIdMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Returns true if the window matches this match rule.
            </summary>
            <param name="target"><see cref="T:System.Object"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.WindowMatchRule">
            <summary>
            Base class for Win32 match rules.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Returns true if the window matches this match rule.
            </summary>
            <param name="target"><see cref="T:OpenSpan.Adapters.ITarget"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowMatchRule.Initialize(OpenSpan.Adapters.IControl,OpenSpan.Adapters.ITarget)">
            <summary>
            Sets the default values for the match rule.
            </summary>
            <param name="findObject">Object from which to derive default values.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="!:Win32Item"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to match the <see cref="!:Win32Item"/>.
            </summary>
            <param name="window"><see cref="!:Win32Item"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.ATLWindowModuleMatchRule">
            <summary>
            This match rule applies to ATL plugin container windows which have no other obvious
            criteria on which to perform matching.  This rule applies to windows whose class name
            takes the form 'ATL:nnnnnnn', where nnnnnnnn is an address within the module.  nnnnnnnn
            could be a different value from one run to another, depending on where the image is based.
            The matching takes place on the module name whose base and range encompass nnnnnnnn.  This
            is the same value every time.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.WindowTypeMatchRule">
             <summary>
             Default match rule used along with the Window Class Name match rule to match 
             Microsoft Windows controls – not otherwise specified (i.e., Control objects). 
             </summary>
             <remarks>
             The main property for this match rule is: 
            
             <b>Type</b>: Gets or sets the Window Style for the match rule.
             The options are: Child, Form, Dialog, MDI Child.
             </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.MatchRules.WindowTypeMatchRule.Type">
            <summary>
            Gets or sets the window style for this <see cref="T:OpenSpan.Adapters.MatchRule"/>
            </summary>
            <value>A <see cref="!:WindowStyle"/> value representing the Window Style.</value>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowTypeMatchRule.Initialize(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inheritors must override this method to set default values for the match rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to get values from.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowTypeMatchRule.IsMatch(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Check to see if <see cref="T:OpenSpan.Adapters.Windows.IWindow"/> matches this rule.
            </summary>
            <param name="window"><see cref="T:OpenSpan.Adapters.Windows.IWindow"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.MatchRules.WindowTextMatchRule">
            <summary>
            Used to match window objects – main application Windows as well as MDI Child Windows.
            The Window Text Match Rule is the default match rule used to match
            window objects – main application Windows as well as MDI Child Windows.
            The small button on the far right of the text match rule button opens to the
            <see cref="!:Match Rule Editor"/> screen.
            </summary>
            <remarks>
            The main properties of this match rule are:
            
                <b>IgnoreCase</b>: Boolean, Default False. Set to True if the text comparison will ignore case.
                
                <b>Mode</b>: Default Simple - text matched literally. Regex mode indicates that the Text
                property contains Regex syntax. Other modes include StartsWith, EndsWith, <see cref="!:Wildcard"/>,
                IsNotSimple, DoesNotContain, DoesNotStartWith, DoesNotEndWith, IsNotRegex, and IsNotWildcard. The Wildcard mode supports the use of an asterisk to specify variable parts of words.
                
                <b>Text</b>: Text used by the match rule to match the text that appears in the title bar
                of the window.  For the sample CRM.exe application, the Login Window Text is "Login”.
                
                <b>Culture</b>: You can set a culture that is used for text comparisons. By default, the
                match rule will utilize the local user’s culture.  However you may set this property to
                a specific culture or an invariant culture used for comparisons. 
            </remarks>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowTextMatchRule.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Returns true if the window matches this match rule.
            </summary>
            <param name="target"><see cref="T:OpenSpan.Adapters.ITarget"/> to match.</param>
            <returns><see langword="true"/> if match, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.MatchRules.WindowTextMatchRule.Initialize(OpenSpan.Adapters.IControl,OpenSpan.Adapters.ITarget)">
            <summary>
            Sets the default values for the match rule.
            </summary>
            <param name="target">Target from which to derive default values.</param>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.OleMessageFilter">
            <summary>
            This class implements the IOleMessageFilter thread error-handling functions.
            It is used for handling concurrency issues on the current thread. For example,
            COM exceptions of type RPC_E_CALL_REJECTED will callback into the RetryRejectedCall
            method and allow the COM call to be retried.
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms680739(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.OleMessageFilter.Register">
            <summary>
            Start the filter by calling on CoRegisterMessageFilter, which registers 
            with OLE the instance of an IMessageFilter interface.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.OleMessageFilter.Unregister">
            <summary>
            Close the filter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.OleMessageFilter.OpenSpan#Adapters#Windows#IOleMessageFilter#HandleInComingCall(System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This method is called prior to each method invocation originating outside the current 
            process and provides the ability to filter or reject incoming calls (or callbacks) to 
            an object or a process. It currently always returns ISHANDLED.
            </summary>
            <param name="dwCallType">The type of incoming call that has been received. Possible 
            values are from the enumeration CALLTYPE.</param>
            <param name="hTaskCaller">The thread id of the caller.</param>
            <param name="dwTickCount">The elapsed tick count since the outgoing call was made</param>
            <param name="lpInterfaceInfo">A pointer to an INTERFACEINFO structure that identifies 
            the object, interface, and method being called. </param>
            <returns>ServerCall enum value</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.OleMessageFilter.OpenSpan#Adapters#Windows#IOleMessageFilter#MessagePending(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Indicates that a message has arrived while COM is waiting to respond to a remote call.
            It currently always returns WAITDEFPROCESS which is the only return type to dispatch the message.
            </summary>
            <param name="hTaskCallee">The thread id of the called application.</param>
            <param name="dwTickCount">The number of ticks since the call was made.</param>
            <param name="dwPendingType">The type of call made during which a message or event was received.</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.OleMessageFilter.OpenSpan#Adapters#Windows#IOleMessageFilter#RetryRejectedCall(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            This method is called when an outbound call is rejected, providing the opportunity to retry or
            cancel. Currently, it will retry until a certain maximum number of ticks from the time the call
            was originally made. There will be a slight delay between each retry.
            </summary>
            <param name="hTaskCallee">The thread id of the called application.</param>
            <param name="dwTickCount">The number of elapsed ticks since the call was made.</param>
            <param name="dwRejectType">Specifies either ServerCall.REJECTED or ServerCall.RETRYLATER, 
            as returned by the object application.</param>
            <returns>CANCEL_SERVER_CALL or the number of milliseconds to wait before retrying</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.ServerCall">
            <summary>
            Indicates the status of server call.
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms680088(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.ServerCall.ISHANDLED">
            <summary>
            The object may be able to process the call.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.ServerCall.REJECTED">
            <summary>
            The object cannot handle the call due to an unforeseen problem, such as network unavailability.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.ServerCall.RETRYLATER">
            <summary>
            The object cannot handle the call at this time. For example, an application might return this value 
            when it is in a user-controlled modal state.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.CallType">
            <summary>
            Specifies the call types used by IMessageFilter::HandleInComingCall.
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms680554(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.CallType.TOPLEVEL">
            <summary>
            A top-level call has arrived and the object is not currently waiting for a reply from a previous outgoing call. 
            Calls of this type should always be handled.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.CallType.NESTED">
            <summary>
            A call has arrived bearing the same logical thread identifier as that of a previous outgoing 
            call for which the object is still awaiting a reply. Calls of this type should always be handled.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.CallType.ASYNC">
            <summary>
            An asynchronous call has arrived. Calls of this type cannot be rejected. OLE always delivers 
            calls of this type.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.CallType.TOPLEVEL_CALLPENDING">
            <summary>
            A new top-level call has arrived with a new logical thread identifier and the object is currently 
            waiting for a reply from a previous outgoing call. Calls of this type may be handled or rejected.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.CallType.ASYNC_CALLPENDING">
            <summary>
            An asynchronous call has arrived with a new logical thread identifier and the object is currently 
            waiting for a reply from a previous outgoing call. Calls of this type cannot be rejected.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.PendingMsg">
            <summary>
            Specifies the return values for the IMessageFilter::MessagePending method.
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms678812(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.PendingMsg.CANCELCALL">
            <summary>
            Cancel the outgoing call.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.PendingMsg.WAITNOPROCESS">
            <summary>
            Wait for the return and don't dispatch the message.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.PendingMsg.WAITDEFPROCESS">
            <summary>
            Wait and dispatch the message
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.RegisteredTargetFactoryList.mCreatingTargets">
            <summary>
            Flag to catch re-entrancy condition
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.RegisteredTargetFactoryList.mTargetFactories">
            <summary>
            List of enabled target factories for this process.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.RegisteredTargetFactoryList.mWindowClosers">
            <summary>
            List of objects that can close windows. IWindowCloser can be implemented by a target factory.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.RegisteredTargetFactoryList.mNewTargetFactoriesQueue">
            <summary>
            Holding place to put new target factories while inside CreateTarget
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.RegisteredTargetFactoryList.mRemoveTargetFactoriesQueue">
            <summary>
            Holding place to put target factories to be removed while inside CreateTarget.  This does not seem
            like a situation that is likely to happen, but it's put here for symmetry.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Reparenting.OriginalWindowType">
            <summary>
            The type of window this was before reparenting
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OpenSpan.Adapters.Windows.Reparenting.OriginalWindowType.TOPLEVEL" -->
        <!-- Badly formed XML comment ignored for member "F:OpenSpan.Adapters.Windows.Reparenting.OriginalWindowType.POPUP" -->
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowStatus.Created">
            <summary>
            Window was created, is in the mCreatedWindows list, and has never been tested for reparenting.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowStatus.Candidate">
            <summary>
            Created as a top-level window, is in both the mSubscribedCandidates and trackedWindows lists, 
            tested and failed to be reparented at least once.  Candidate windows have not been reported to the user
            control.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowStatus.Reported">
            <summary>
            Top-level window with at least one child pop-up window that are not eligible to be reparented. Reported 
            to the user control with instructions to create control to hold window without reparenting it. It will 
            register for Reparented window events to report to the user control.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowStatus.Reparented">
            <summary>
            Top-level window that is eligible to be reparented and has been reported to the user control. If the prior
            status was reported then the user control will reparent the window in the previously created control for
            this window.  Otherwise, it will registered for Reparented window events for reporting to the user control.
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowStatus.Other">
            <summary>
            None of the above (an error condition, such as a null window, could cause this status)
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingHelper.IsTopMostToolWindow(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Checks to see if this Window is a top most tool window, i.e. it has both extended styles;
            WS_EX_TOPMOST and WS_EX_TOOLWINDOW
            </summary>
            <remarks>
            CR48817 When you drag a link in IE a 'SysDragImage' window is created and destroyed repeatedly
            leading to exceptions in the UserControl and a flicker in the IE UI.
            </remarks>
            <param name="window">The window to be checked</param>
            <returns>True if this is a top most tool window, false otherwise</returns>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.mAdapter">
            <summary>
            The associated Windows adapter
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.mIsAdapterRegisteredForReparenting">
            <summary>
            Flag set when a user control registers for this adapter (by ID or type) with the reparenting service
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.mRunningProcesses">
            <summary>
            List of running processes
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.mCreatedWindows">
            <summary>
            List of all windows that have been created.  This list is populated as windows are created and is emptied in the Idle event
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.mTrackedWindows">
            <summary>
            List of the top-level windows that are either candidates or have already been reported to the reparenting user control for 
            reparenting
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.mSubscribedCandidates">
            <summary>
            List of windows that have subscribed for Candidate events
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.IsOwnedByNonActiveWindow(System.IntPtr)">
            <summary>
            Is this window or its owner a non-active tab in the reparenting container
            </summary>
            <remarks>
            We only want to hide a window when we know it is owned by a non-active tab
            If a window is owned by the active tab then we want to show it
            If we cannot determine who owns the window then it is safer to show it
            </remarks>
            <param name="windowHandle">The handle of the window we're checking</param>
            <returns>true if we know the window should be hidden</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.NotifyWindowUnselected(System.IntPtr)">
            <summary>
            Called by the UserControl when a window that was previously selected in the reparenting UI
            no longer is.  
            Ex: Window X tab was showing, then Window Y tab is selected.  NotifyWindowUnselected is called for
            Window X then NotifyWindowSelected is called for Window Y
            </summary>
            <param name="windowHandle">The window that is no longer selected</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.NotifyWindowClicked(System.IntPtr)">
            <summary>
            Sets focus to the window specified when its tab is clicked.
            </summary>
            <param name="windowHandle">Reparented window or child window to gain focus.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.NotifyWindowSelected(System.IntPtr)">
            <summary>
            Called by the UserControl when a window that was previously not selected in the reparenting UI
            becomes selected.  
            Ex: Window X tab was showing, then Window Y tab is selected.  NotifyWindowUnselected is called for
            Window X then NotifyWindowSelected is called for Window Y
            </summary>
            <param name="windowHandle">The window that is no longer selected</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.IsWindowCandidate(OpenSpan.Adapters.Windows.IWindow,System.Boolean,System.Boolean)">
            <summary>
            Candidate windows includes top-level or pop-up windows which can be reparented or tracked.  The criteria
            is that the window must be visible and the width/height dimensions must be non-zero.
            </summary>
            <param name="window">The top-level or pop-up window to test</param>
            <param name="skipVisibleCheck"></param>
            <param name="skipResizeCheck"></param>
            <returns>true if the top-level window may be reparented or pop-up window may be tracked</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.IsCandidateWindow(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Returns true if the window is a candidate to be reparented. This include windows reported to the user control because
            they hold pop-up windows but are not yet eligible to be repareted.
            </summary>
            <param name="window">The window to check</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.IsReportedWindow(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Returns true if the window was reported to the user control. This include windows reported to the user control because
            they hold pop-up windows but are not yet eligible to be repareted. Reported, non-reparented windows are considered both
            candidate (since they have not been reparented) and reported (since the control was notified) windows. They have subscribed
            to the candidate events to re-check for reparenting eligibility and to reparenting events pertinent to the control (for
            example, text change events).
            </summary>
            <param name="window">The window to check</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Reparenting.WindowsReparentingManager.IsTheSelectedWindow(System.IntPtr)">
            <summary>
            Returns true if the window is the active tab
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ScreenShotHelper.GetOpenSpanScreenShot(OpenSpan.Adapters.Windows.IWindow,OpenSpan.Adapters.Targets.IControlTarget)">
            <summary>
            Takes a screenshot of the specified form, highlighting the specified control
            This method can only be called while Scout/WindowsBroker is injected
            </summary>
            <param name="form">The Window form of the BrowserFormTarget that the control is contained in</param>
            <param name="control">The actual control that the screenshot is for.</param>
            <returns>Returns an Image of the form that contains the control with the control highlighted by a rectangle.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ScreenShotHelper.GetOpenSpanScreenShot(System.IntPtr,System.Drawing.Rectangle,OpenSpan.Adapters.Targets.IControlTarget)">
            <summary>
            Takes a screenshot of the specified form, highlighting the specified control. 
            This method can be called whether or not Scout/WindowsBroker is injected or not
            </summary>
            <param name="handle">The handle of the BrowserFormTarget that the control is contained in</param>
            <param name="screenRectangle">The Screen Rectangle of the BrowserFormTarget that the control is contained in</param>
            <param name="control">The actual control that the screenshot is for.</param>
            <returns>Returns an Image of the form that contains the control with the control highlighted by a rectangle.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.ScreenShotHelper.GetOpenSpanScreenShot(System.IntPtr,System.Drawing.Rectangle,OpenSpan.Adapters.Targets.IControlTarget,System.Boolean,System.Boolean)">
            <summary>
            This method captures the screenshot and draws a Rectangle over the given control to highlight it
            </summary>
            <param name="handle">The window handle of the browserForm the control is contained in, if available</param>
            <param name="formScreenRectangle">The screenrectangle of the browserForm the control is contained in, if available</param>
            <param name="control">The control to be highlighted</param>
            <param name="drawRectangle">Determines whether the rectangle to highlight the given control will be drawn or not.</param>
            <param name="handleScalingFactor">Determines whether or not to scale the highlighting rectangle based on the Windows Scaling Factor</param>
            <returns>Returns an Image of the form that contains the control with the control highlighted by a rectangle.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Targets.AccessibilityTarget">
            <summary>
            We had to create this target to be able to get the correct value from Microsoft Office Outlook controls.
            RICHEDIT20WPT is the type of control used by Outlook for their To, CC, and Subject fields in a new email window.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.AccessibilityTarget.GetAccChildValue(Accessibility.IAccessible)">
            <summary>
            Used to retrieve the text contained with in the accessbile control that is passed in.
            This method will iterate through the children controls found with in the accessible control
            and their children if any are found. This method will only get the text from the children 
            whose AccessibleRole is Text. Controls with other roles can potentially contain unwanted
            ;, {}, or 0.
            </summary>
            <param name="accessible"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.BaseMenu.Uninitialize(System.Boolean)">
            <summary>
            Uninitializes the menu before a refresh operation.
            </summary>
            <param name="refreshing">True, if refreshing the menu.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.BaseMenu.Dispose">
            <summary>
            Dispose the menu.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.ContextMenuItem.GetParentMenuInfo(OpenSpan.Adapters.Windows.Targets.HideContextMenuData@)">
            <summary>
            Populate an array with the hierarchy of menu items above the current menu item.
            </summary>
            <param name="menuData"></param>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Targets.HideContextMenuData">
            <summary>
            Struct to pass context menu hierarchy data to hide the menu
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.ToolBarButton.ParentTarget">
            <summary>
            Returns the parent target as an ITarget.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ToolBarButton.Click">
            <summary>
            Fired when the control is clicked after the underlying control is given the event.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ToolBarButton.Clicking">
            <summary>
            Fired when the control is clicked but before underlying control is given the event.
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.Control.MatchAttempted">
            <summary>
            Flag to track if we attempt to match this window when OnMatch is called.
            We don't attempt if the window is disposed, if MatchOnIdle is false, or if the window is not AdapterVisible.
            </summary>
            <remarks>
            CR 49722 - A DotNetFormTarget was not visible when created so it was not matched. Because we clear the MatchOnIdle
            flag after the call to OnMatch this target did not get another chance to match until it was too late.
            </remarks>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.Control.CaptureBitmap(System.Boolean,System.Boolean)">
            <summary>
            Capture a <see cref="T:System.Drawing.Bitmap"/> image of the current control. 
            </summary>
            <param name="clientAreaOnly">A value indicating to capture the client area only.</param>
            <param name="includeChildren">A value indicating to additionally capture child controls</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of the capture region.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.Control.InvokeBitmapCommand(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Invoke one of the GDI read commands: WM_OS_CAPTURE_BITMAP or WM_OS_CAPTURE_GDI_TEXT
            </summary>
            <param name="hwnd"></param>
            <param name="clientAreaOnly"></param>
            <param name="includeChildren"></param>
            <returns></returns>
            
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.Control.CaptureGdiText(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Capture Owner drawn text from GDI
            </summary>
            <returns>Text captured from the GDI paint</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.Control.InvokeGdiTextCommand(System.IntPtr,System.Boolean,System.Boolean,System.Boolean,OpenSpan.Interop.External.Windows.RECT,System.Int32)">
            <summary>
            Invoke the GDI read text commands: WM_OS_CAPTURE_GDI_TEXT
            </summary>
            <param name="hwnd"></param>
            <param name="clientAreaOnly"></param>
            <param name="includeChildren"></param>
            <param name="useMemoryDC"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.Control.InvokeGdiTextDirectCommand(System.IntPtr,System.Boolean,OpenSpan.Interop.External.Windows.RECT,System.Int32)">
            <summary>
            Invoke the GDI read text commands: WM_OS_CAPTURE_GDI_TEXT_DIRECT
            </summary>
            <param name="hwnd">The window to grab the text from.</param>
            <param name="includeChildren"></param>
            <param name="rect">The rectangle within the window to capture. Sending 0,0,0,0 gets entire window.</param>
            <param name="pid">The process id needed for shared memory</param>
            <returns>The CommandResponse structure that serves as shared memory between the adapter and Scout.</returns>
            <remarks>This method assumes direct drawing to the window and does not use caching.</remarks>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Targets.ControlRegion">
            <summary>
            Target for a ControlRegion.  There is not a phyical "ControlRegion" control in the target application, rather the ControlRegion
            target is initialized to the parent's hwnd to interact with the area defined at design time.  This target is created
            just-in-time in Targets.Control.GetTargets() when the child control is a ControlRegion
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.Click">
            <summary>
            Fired when the underlying region has received a click event.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.Clicking">
            <summary>
            Fired when the control region is clicked but before the underlying object receives the event.
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.DoubleClick">
            <summary>
            Fired when the underlying region has received a double-click event.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.DoubleClicking">
            <summary>
            Fired when the control region is double-clicked but before the underlying object
            receives the event.
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.RightClick">
            <summary>
            Fired when the underlying region has received a right-click event.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.RightClicking">
            <summary>
            Fired when the control region is right-clicked but before the underlying object receives the event.
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.MouseDown">
            <summary>
            Fired when the underlying region has received a mouse button down event.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.ControlRegion.MouseUp">
            <summary>
            Fired when the underlying region has received a mouse button up event.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.ControlRegion.Rectangle">
            <summary>
            Gets the area that the region encloses relative to the containing application including its title bar.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.ControlRegion.ClientRectangle">
            <summary>
            Get the area covered by the control region relative to the client window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.ControlRegion.Text">
            <summary>
            Gets the text via GDI of the control region.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.ControlRegion.ParentTarget">
            <summary>
            Returns the parent target as an ITarget.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.ControlRegion.UseDirectText">
            <summary>
            Indicates how text from the control region should be read.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.ControlRegion.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the Control to raise control region events.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.ControlRegion.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the Control to raise control region events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.ControlRegion.PerformClick">
            <summary>
            Clicks the control region in its center.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.ControlRegion.PerformClick(System.Int32,System.Int32)">
            <summary>
            Clicks the control region at the x,y position relative to the upper-left corner of the control region.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.ControlRegion.PerformDoubleClick">
            <summary>
            Double-clicks the control region in its center.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.ControlRegion.PerformDoubleClick(System.Int32,System.Int32)">
            <summary>
            Double-clicks the control region at the x,y position relative to the upper-left corner of the control region.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.DateTimePicker.Text">
            <summary>
            Gets or sets the window text.
            </summary>
            <remarks>
            This override is needed because the base Text setter does not actually update the date
            on the control.  To get around this, we can parse the text and then set the Value property.
            This should work fine as long as the date is formatted in the current culture that 
            Studio/Integrator is running in.
            </remarks>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.Targets.FormBase">
            <summary>
            Summary description for FormBase.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.MenuItem.ParentTarget">
            <summary>
            Returns the parent target as an ITarget.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.StatusBar.PanelCount">
            <summary>
            Gets the number of panels on the status bar.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Targets.StatusBar.IsSimple">
            <summary>
            Gets the Simple Mode setting which indicates how the status bar is redrawn if the text is changed.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.StatusBar.GetPanelText(System.Int32)">
            <summary>
            Gets the text of the given panel
            </summary>
            <param name="panelIndex">0 based index</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.StatusBar.SetPanelText(System.String,System.Int32)">
            <summary>
            Sets the text on the given panel
            </summary>
            <param name="text">Text to display in panel</param>
            <param name="panelIndex">0 based index</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Targets.StatusBar.GetIcon(System.Int32)">
            <summary>
            Returns the icon on a panel
            </summary>
            <param name="panelIndex">0 based index</param>
            <returns></returns>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Targets.StatusBar.PanelTextChanged">
            <summary>
            Fires when the text on a panel is changed.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsIpc">
            <summary>
            This class is used to interact with the Windows Broker and translators using IPC instead of 
            SendMessage.  It is used primarily for any outbound messaging that must take place while in the
            context of matching.  This is to prevent nasty reentrancy bugs that can happen when any of the recipient
            threads are not pumping messages
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsIpc.WindowsIpcMessage.WindowHandle">
            <summary>
            The window for which this message is sent.  Not applicable for general messages
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsIpc.WindowsIpcMessage.MessageId">
            <summary>
            The message ID (see below)
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsIpc.WindowsIpcMessage.Data">
            <summary>
            A message-specific field that can be used to pass parameters and/or return results, typically
            with shared memory
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsIpc.GetTypeString(System.Int32,System.IntPtr)">
            <summary>
            This is used by TargetFactories to get additional information about the window that is not available
            with WM_* messages or user32 API calls.  The result is used to make a decision about whether to 
            create a target, and in some cases, what type of target to create
            </summary>
            <returns>The type string returned by the translator or empty string if no type string 
            could be determined</returns>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsIpc.SetControlTypeMessage.WindowHandle">
            <summary>
            The window handle whose type to set
            </summary>
        </member>
        <member name="F:OpenSpan.Adapters.Windows.WindowsIpc.SetControlTypeMessage.ControlType">
            <summary>
            The new control type
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.Description">
            <summary>
            Gets the description of this target factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.UseKeys">
            <summary>
            Gets or sets whether clones of this control can be created, if there
            are multiple matching controls found.  Always returns true for Target Factories.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.UseKeysDisplay">
            <summary>
            Gets whether clones of this control can be created, if there are multiple 
            matching controls found. Always returns true for Target Factories.
            </summary>
            <remarks>
            This property exists to display as a read-only "UseKeys" property in the property
            grid for Target Factories.  This is required because the original UseKeys property 
            could not be marked with [ReadOnly(true)] without interfering with the 
            ExtendedMetadata attribute.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.Enabled">
            <summary>
            Gets or sets the enabled value of the factory. Inheritors should not override this property.
            The windows process and other utilizers of the target factory will check this property to determine
            whether to load translators and call create target.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.FactoryName">
            <summary>
            Returns the factory name from the configuration xml. Inheritors can override to
            provide a different name and ignore the set if necessary.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.FilesToInject">
            <summary>
            Returns translator file name combined with current directory.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsTargetFactory.CreateTarget(System.Type,OpenSpan.Adapters.ITarget)">
            <summary>
            Inheritors must override to create targets.
            </summary>
            <param name="targetType">Type of target to create.</param>
            <param name="defaultTarget">Default target.</param>
            <returns>New target or null.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsTargetFactory.IsMatch(OpenSpan.Adapters.ITarget)">
            <summary>
            Tests if the target factory matches the given target.  This override contains specific 
            logic to ensure that factories don't match modules that belong to a process specified 
            in the <see cref="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.ExcludedProcesses"/> property.
            </summary>
            <param name="target">Target to match.</param>
            <returns>True if the control matches the target. False, otherwise.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsTargetFactory.TargetContainer">
            <summary>
            Gets the target container for creating targets.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsTargetFactory.AttachTarget(OpenSpan.Adapters.ITarget)">
            <summary>
            Inheritors should override AttachTarget to do any additional factory initialization. Inheritors
            should call the base first to attach the target and populate any target dependent properties.
            This also notifies the process of the new target factory.
            </summary>
            <param name="target">Windows module matching the factory.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsTargetFactory.DetachTarget">
            <summary>
            Detaches this target factory from the attached module, and then notifies the
            process that the target factory is no longer associated.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.ParentTarget">
            <summary>
            Returns the parent target as an ITarget.
            *Note* This property or method is not intended for public use.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.NoProcess">
            <summary>
            Internal flag used to modify the behavior of the Windows adpater in the case where there is no
            injection into a remote process, and therefore no IWindowsProcess available.  An example known
            override for this is UniversalWebAdapter, when automating Chrome
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.ShouldProcessMessages">
            <summary>
            Indicates whether we should process messages that come from the
            window this target represents.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.Activate">
            <summary>
            Activate the form this window belongs to and set focus on this window.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.Focus">
            <summary>
            Set the input focus to this window.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.Show">
            <summary>
            Make the window visible
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.Hide">
            <summary>
            Hide the window
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.GetText(System.Int32)">
            <summary>
            Get the text of the window.  A caption for a form, text for a button, etc.
            </summary>
            <param name="bufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.ShowTooltip(System.String,System.String,System.Windows.Forms.ToolTipIcon,System.Drawing.Color,System.Drawing.Color,OpenSpan.Adapters.Targets.ToolTipAnchorPosition,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip for the control for when the mouse hovers over it.
            </summary>
            <param name="text">Text to display in tooltip</param>
            <param name="title">Title displayed within the tooltip as a line of bold text above the standard text of the tooltip description. Typically used to differentiate categories of controls on a form or as an introduction to a long control description.</param>
            <param name="icon"></param>
            <param name="textColor"></param>
            <param name="backgroundColor"></param>
            <param name="anchorPosition"></param>
            <param name="maxWidth"></param>
            <param name="rectangle"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.ShowTooltip(System.String,System.String,System.Windows.Forms.ToolTipIcon,System.Drawing.Color,System.Drawing.Color,OpenSpan.Adapters.Targets.ToolTipAnchorPosition,System.Int32)">
            <summary>
            Creates a tooltip for the control for when the mouse hovers over it.
            </summary>
            <param name="text">Text to display in tooltip</param>
            <param name="title">Title displayed within the tooltip as a line of bold text above the standard text of the tooltip description. Typically used to differentiate categories of controls on a form or as an introduction to a long control description.</param>
            <param name="icon"></param>
            <param name="textColor"></param>
            <param name="backgroundColor"></param>
            <param name="anchorPosition"></param>
            <param name="maxWidth"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.PerformClick(System.Int32,System.Int32,System.Windows.Forms.MouseButtons,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Causes the specified mouse click to be sent to the window at the given location.
            </summary>
            <param name="x">x coordinate where 0 is the far-left of the window</param>
            <param name="y">y coordinate where 0 is the top portion of the window</param>
            <param name="button">which mouse button to send (left, right, middle)</param>
            <param name="clicks">number of clicks to send</param>
            <param name="synchronous"></param>
            <param name="timeout"></param>
            <param name="keyState">The value used when overriding the mouse left button key state, -1 means do not override</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.SendKeys(System.String,System.Boolean)">
            <summary>
            Simulates the key press associated with a character strings.
            </summary>
            <param name="keys">string of characters to send to the control</param>
            <param name="focus"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.ParseCommand(System.String,System.Boolean@)">
            <summary>
            Convert string key commands into a key object.
            </summary>
            <param name="command">Key command to convert</param>
            <param name="shift">out - shift is required for the returned key enumeration</param>
            <returns>Keys Enumeration</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.ParseChar(System.Char,System.Boolean@,System.Boolean@)">
            <summary>
            Convert character key commands into a key object.
            </summary>
            <param name="c">character to convert</param>
            <param name="shift">out -True if shift is required for the returned key enumeration</param>
            <param name="skip">out - True if this key should be skipped.</param>
            <returns>Keys Enumeration</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.PostKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Send a KeyDown message to window
            </summary>
            <param name="key">Key to send</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.PostKeyUp(System.Windows.Forms.Keys)">
            <summary>
            Send a KeyUp message to window
            </summary>
            <param name="key">Key to send</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.SetKeyboardState(System.Byte[])">
            <summary>
            Copies a 256-byte array of keyboard key states into the window calling threads keyboard-input state table.
            </summary>
            <param name="state">State data to send</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.CreateKeyLParam(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create the LParam Data for sending a WM_KEYUP and WM_KEYDOWN message.
            </summary>
            <param name="repeats">Repeat count</param>
            <param name="key">Scan Code</param>
            <param name="extKey">Extended Key</param>
            <param name="context">Context Code</param>
            <param name="keyState">Previous State</param>
            <param name="transState">Transition State</param>
            <returns>Integer representing the Key State</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.DetachControl(OpenSpan.Adapters.IControl)">
            <summary>
            Method for invoking control detach.
            </summary>
            <param name="control"></param>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Window.Clicking">
            <summary>
            Fired when window is clicked but before underlying control is given the event.
            </summary>
            <remarks>
            This event can be cancelled in which case the event is not passed on to the control after handling it.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Bounds">
            <summary>
            Gets the window rectangle within the parent window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Windows">
            <summary>
            Gets the list of child windows.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.WindowTag">
            <summary>
            An object to be stored with the window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.ClientRectangle">
            <summary>
            Gets the window rectangle. The rectangle location 
            is always zero.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.ControlId">
            <summary>
            Gets the control id.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Enabled">
            <summary>
            Gets or sets whether the window can accept input.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.ExtendedStyle">
            <summary>
            Gets the extended style of the window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Handle">
            <summary>
            Gets the window handle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Id">
            <summary>
            Returns the control ID for this window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.IsDestroying">
            <summary>
            Returns true if this window or one of it's parent windows is being destroyed.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.IsForeground">
            <summary>
            Returns true if window is in the foreground and visible.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.NotifyReparent">
            <summary>
            Notifies the window that it is going to be reparented. This is done as early as possible so the 
            cached object IDs can be updated.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.NotifyDestroy">
            <summary>
            Notifies the window that it is going to be destroyed. Recursively notifies children.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.NativeTypeName">
            <summary>
            Returns the class name for this target.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Parent">
            <summary>
            Gets or sets the window parent.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.ParentHandle">
            <summary>
            Gets the handle of the parent window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Process">
            <summary>
            Gets the process containing the window.
            *Note* This property or method is not intended for public use.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.RealWindowClassName">
            <summary>
            Gets the real class name of the window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.ScreenRectangle">
            <summary>
            Gets the screen rectangle of the window.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Style">
            <summary>
            Gets the window style value.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Text">
            <summary>
            Gets or sets the window text.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.Visible">
            <summary>
            Gets a value indicating if the window is visible.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.AdapterVisible">
            <summary>
            Gets a value indicating if the window is visible according to the windows tracked by the adapter.  If the window and
            all parent windows are visible then this returns true even if an ancestor window, not tracked by the adapter, is non-visible.
            This is significant during reparenting when a top-level window is reparented into our reparenting container while the
            container itself gets hidden.  Even though the container is not visible, we still want the reparented window and controls to 
            match.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.WindowClassName">
            <summary>
            Gets the window class name.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.WindowType">
            <summary>
            Gets the window type.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.SignalInitialized">
            <summary>
            Causes the Window to raise its <see cref="!:Initialized"/> event.
            </summary>
            <remarks>
            This is called by the <see cref="T:OpenSpan.Adapters.Windows.WindowsProcess"/> after the window
            has been created and initialized by its target factory.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.Window.CustomMessageHandler">
            <summary>
            Returns an ICustomMessageHandler, if one is provided.  Subclasses of Window can provide one by overriding
            GetCustomMessageHandler.  Associated, non-Window targets can provide one using a to-be-determined
            mechanism
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.GetCustomMessageHandler">
            <summary>
            If a subclass of Window provides custom message handling, this method can be overridden to 
            return a custom message handler.  This indicates an advanced level of custom message processing 
            capabilities and allows custom messages to be queued.
            
            If a target is not an IWindow but is associated with a IWindow, it can provide an ICustomMessageHandler 
            to the IWindow that is exposed to WindowsProcess.  NOTE:  That feature is not implemented yet
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Window.WindowAdded">
            <summary>
            Fires when a window is added to the list.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.Window.WindowRemoved">
            <summary>
            Fires when a window is removed from the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.GetContextMenuItems">
            <summary>
            Will return a list of context menu items from the currently opened context menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.GetTopParentForm">
            <summary>
            Gets the top most parent form for the given window.
            </summary>
            <returns>Parent form.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.GetParentForm">
            <summary>
            Gets the immediate parent form for the given window.
            </summary>
            <returns>Parent form.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.AttachWindowAndAddEventHandler(System.Object,System.Delegate)">
            <summary>
            This method should be called instead of <see cref="!:AddEventHandler"/>
            for all events on the window that require messages received for the window.
            It will send a WM_OS_ATTACH_WINDOW to the window if we're not currently 
            attached to a control, so that we can receive events for the target.
            </summary>
            <remarks>
            For some Window events, we call the regular <see cref="!:AddEventHandler"/> instead
            of this method, because we receive messages for the event without even when 
            not attached.  These are events such as <see cref="E:OpenSpan.Adapters.Windows.Window.TextChanged"/>
            and <see cref="E:OpenSpan.Adapters.Windows.Window.VisibleChanged"/>.
            </remarks>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.AttachWindow">
            <summary>
            Callers can attach the window so additional windows messages are received.
            </summary>
            <remarks>
            Added to support toolbar.
            </remarks>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.GetTargets(OpenSpan.Adapters.IControl)">
            <summary>
            *Note* This property or method is not intended for public use.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.Window.GetTargets(OpenSpan.Adapters.IControl,OpenSpan.Adapters.GetTargetsWarning@)">
            <summary>
            *Note* This property or method is not intended for public use.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfiguration.Type">
            <summary>
            Gets the factory type.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfiguration.Assembly">
            <summary>
            Gets the factory type.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfiguration.MaximumVersion">
            <summary>
            Gets the max supported version.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfiguration.MinimumVersion">
            <summary>
            Gets the min supported version.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfiguration.ModuleName">
            <summary>
            Gets the name of the module associated with the window factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfiguration.TypeResolutionService">
            <summary>
            Get the type management service.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfiguration.CreateWindowFactory">
            <summary>
            Creates the window factory.
            </summary>
            <returns>Window factory.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList">
            <summary>
            List of factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Item(System.Int32)">
            <summary>
            Gets or sets the factory at the supplied index.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Item(System.String)">
            <summary>
            Gets a window factory configuration by module name.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Insert(System.Int32,OpenSpan.Adapters.Windows.IWindowFactoryConfiguration)">
            <summary>
            Inserts the factory at the specified index.
            </summary>
            <param name="index">Index at which to insert the factory.</param>
            <param name="factory">WindowFactoryConfiguration to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Contains(OpenSpan.Adapters.Windows.IWindowFactoryConfiguration)">
            <summary>
            Indicates if the factory is contained in the list.
            </summary>
            <param name="factory">WindowFactoryConfiguration to check for.</param>
            <returns>True if the factory is in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Contains(System.String)">
            <summary>
            Indicates if a factory configuration corresponding to the module is contained in the list.
            </summary>
            <param name="module">WindowFactoryConfiguration to check for.</param>
            <returns>True, if a factory corresponding ot the module is contained in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Remove(System.String)">
            <summary>
            Removes the factory from the list.
            </summary>
            <param name="factory">Module name of configuration to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Remove(OpenSpan.Adapters.Windows.IWindowFactoryConfiguration)">
            <summary>
            Removes the factory from the list.
            </summary>
            <param name="factory">WindowFactoryConfiguration to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.RemoveAt(System.Int32)">
            <summary>
            Removes the factory from the list at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.IndexOf(OpenSpan.Adapters.Windows.IWindowFactoryConfiguration)">
            <summary>
            Returns the index of the factory in the collection.
            </summary>
            <param name="factory">WindowFactoryConfiguration to find.</param>
            <returns>Index of factory.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Add(OpenSpan.Adapters.Windows.IWindowFactoryConfiguration)">
            <summary>
            Adds the factory to the collection.
            </summary>
            <param name="factory">WindowFactoryConfiguration to add.</param>
            <returns>Returns the index of the factory after it is added.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.IsReadOnly">
            <summary>
            Returns true if the list is read only.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.System#Collections#IList#Item(System.Int32)">
            <summary>
            Interface implementation.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="index">Index to insert object at.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.System#Collections#IList#Remove(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Interface implemenation.
            </summary>
            <param name="value">Object to check for.</param>
            <returns>True if the list contains the object. False, otherwise.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to find.</param>
            <returns>Index of object in list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds object to list.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Index of object.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.IsFixedSize">
            <summary>
            Returns true if the list is of a fixed size.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.IsSynchronized">
            <summary>
            Returns true if the list is synchronized.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.Count">
            <summary>
            Returns a count of the number of factories in the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the list of factories into the supplied array starting
            at the specified index.
            </summary>
            <param name="array">Array to copy factories to.</param>
            <param name="index">Index to being copying.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.SyncRoot">
            <summary>
            Returns the syncroot of the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryConfigurationList.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowFactoryList">
            <summary>
            List of factory.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.Item(System.Int32)">
            <summary>
            Gets or sets the factory at the supplied index.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.Item(System.String)">
            <summary>
            Gets a window factory by module name.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.Insert(System.Int32,OpenSpan.Adapters.Windows.IWindowFactory)">
            <summary>
            Inserts the factory at the specified index.
            </summary>
            <param name="index">Index at which to insert the factory.</param>
            <param name="factory">WindowFactory to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.Contains(OpenSpan.Adapters.Windows.IWindowFactory)">
            <summary>
            Indicates if the factory is contained in the list.
            </summary>
            <param name="factory">WindowFactory to check for.</param>
            <returns>True, if the factory is in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.Contains(System.String)">
            <summary>
            Indicates if a factory corresponding to the module is contained in the list.
            </summary>
            <param name="module">WindowFactory to check for.</param>
            <returns>True, if a factory corresponding ot the module is contained in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.Remove(OpenSpan.Adapters.Windows.IWindowFactory)">
            <summary>
            Removes the factory from the list.
            </summary>
            <param name="factory">WindowFactory to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.RemoveAt(System.Int32)">
            <summary>
            Removes the factory from the list at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.IndexOf(OpenSpan.Adapters.Windows.IWindowFactory)">
            <summary>
            Returns the index of the factory in the collection.
            </summary>
            <param name="factory">WindowFactory to find.</param>
            <returns>Index of factory.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.Add(OpenSpan.Adapters.Windows.IWindowFactory)">
            <summary>
            Adds the factory to the collection.
            </summary>
            <param name="factory">WindowFactory to add.</param>
            <returns>Returns the index of the factory after it is added.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.IsReadOnly">
            <summary>
            Returns true if the list is read only.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.System#Collections#IList#Item(System.Int32)">
            <summary>
            Interface implementation.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="index">Index to insert object at.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.System#Collections#IList#Remove(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Interface implemenation.
            </summary>
            <param name="value">Object to check for.</param>
            <returns>True if the list contains the object. False, otherwise.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to find.</param>
            <returns>Index of object in list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds object to list.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Index of object.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.IsFixedSize">
            <summary>
            Returns true if the list is of a fixed size.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.IsSynchronized">
            <summary>
            Returns true if the list is synchronized.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.Count">
            <summary>
            Returns a count of the number of factories in the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the list of factories into the supplied array starting
            at the specified index.
            </summary>
            <param name="array">Array to copy factories to.</param>
            <param name="index">Index to being copying.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowFactoryList.SyncRoot">
            <summary>
            Returns the syncroot of the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowFactoryList.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.WindowsAreInSameProcess(System.IntPtr,System.IntPtr)">
            <summary>
            Determines if the two handles passed in reside in the same process.
            </summary>
            <param name="hWnd1">Handle of first window</param>
            <param name="hWnd2">Handle of second window</param>
            <returns>true if the windows are in the same process. false if not.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.WindowIsInAdapterProcess(System.IntPtr,OpenSpan.Adapters.Windows.IWindowsAdapter)">
            <summary>
            Determines if the handle passed in is included in a monitored process of the adapter.
            Note: This includes child processes.
            </summary>
            <param name="handle">Window Handle</param>
            <param name="adapter">Adapter to search for window handle.</param>
            <returns>true if it is included in a monitored process of the adapter. false if not.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.GetMessageOnlyAncestor">
            <summary>
            Gets the ancestor to message only windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.GetProcessIdByHandle(System.IntPtr)">
            <summary>
            Returns the Process ID by handle
            </summary>
            <param name="hwnd">hwnd</param>
            <returns>pid</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.IsTopMost(System.IntPtr)">
            <summary>
            Checks if "The window should be placed above all non-topmost windows and should stay above them, 
            even when the window is deactivated."
            </summary>
            <param name="hwnd">Window handle to be checked</param>
            <returns>True if this window is top most, false otherwise</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.IsToolWindow(System.IntPtr)">
            <summary>
            Checks if "The window is intended to be used as a floating toolbar. A tool window has a title bar that is shorter 
            than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar..."
            </summary>
            <param name="hwnd">Window handle to be checked</param>
            <returns>True if this window is a tool window, false otherwise</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.GetTopParentForm(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Gets the top most parent form for the given window.
            </summary>
            <param name="window">Window to get parent form for.</param>
            <returns>Parent form.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.GetParentForm(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Gets the immediate parent form for the given window.
            </summary>
            <param name="window">Window to get parent form.</param>
            <returns>Parent form.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.GetTopParentForm(System.IntPtr)">
            <summary>
            Gets the top most parent form for the given window.
            </summary>
            <param name="hwnd">Window to get parent form for.</param>
            <returns>Parent form.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.GetParentForm(System.IntPtr)">
            <summary>
            Gets the immediate parent form for the given window.
            </summary>
            <param name="hwnd">Window to get parent form.</param>
            <returns>Parent form.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.IsForeground(System.IntPtr)">
            <summary>
            Returns true if the window is visible and in the foreground.
            Checks MDI z-order as well. Does not check child z-order.
            </summary>
            <param name="hwnd">Window to check.</param>
            <returns>True, if window is in the foreground or is a child of a window in the foreground. False, otherwise.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.PidToString(System.Int32)">
            <summary>
            Format a PID for display in the log.  This give all consumers a common place to go to format a process id.
            </summary>
            <param name="pid">The process id to format.</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.HwndToString(System.Int32)">
            <summary>
            Format an HWND for display in the log.  This give all consumers a common place to go to format a window handle.
            </summary>
            <param name="hwnd">The Window handle to display</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.HwndToString(System.IntPtr)">
            <summary>
            Format an HWND for display in the log.  This give all consumers a common place to go to format a window handle.
            </summary>
            <param name="hwnd">The Window handle to display</param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.CloseWindowSync(System.IntPtr,System.Boolean,System.Int32)">
            <summary>
            Closes the specified window using synchronous SendMessageTimeout.
            </summary>
            <param name="handle">Window to close</param>
            <param name="force">If true, sends WM_CLOSE. If false, sends WM_SYSCOMMAND SC_CLOSE.</param>
            <param name="timeout">Time to wait for the message to be processed</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails or times out, the return value is 0. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.CloseWindow(System.IntPtr,System.Boolean)">
            <summary>
            Closes the specified window using PostMessage.
            </summary>
            <param name="handle">Window to close</param>
            <param name="force">If true, posts WM_CLOSE. If false, posts WM_SYSCOMMAND SC_CLOSE.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.AdvancedCloseWindow(System.IntPtr,System.Boolean,OpenSpan.Adapters.IAdapter)">
            <summary>
            Full featured window close logic that used to reside in WindowsProcess.CloseWindows. It was
            moved here as part of the IWindowCloser updates. Any target factory implementing IWindowCloser
            can close a top-level window in the same manner as before using this method.
            </summary>
            <param name="handle">The handle to a top-level window</param>
            <param name="force">If set to true, then WM_CLOSE will be posted to the window. If set to false, then
            WM_SYSCOMMAND with SC_CLOSE is sent to the window. This is analagous to clicking the X on the title bar.</param>
            <param name="adapter">The adapter associated with the windows. This is used for logging purposes within
            the method and can be null if the adapter isn't available.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowHelper.Win32ScalingFactorPercent">
            <summary>
            Gets the horizontal and vertical scaling factors as a Point. For example, setting
            the Windows display to 125% would return X, Y values of 125, 125
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.ReduceByScalingFactor(System.Drawing.Point@)">
            <summary>
            Reduce the specified point by the scaling factor. For example, setting the windows display to 125%
            would multiply the X and Y values by 100/125.
            </summary>
            <param name="point">The pass by ref point to apply the scaling factor reduction</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.ReduceByScalingFactor(System.Drawing.Rectangle@)">
            <summary>
            Reduce the specified rectangle by the scaling factor. For example, setting the windows 
            display to 125% would multiply the X, Y, Width, and Height values by 100/125.
            </summary>
            <param name="rect">The pass by ref rectangle to apply the scaling factor reduction</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.IncreaseByScalingFactor(System.Drawing.Rectangle@)">
            <summary>
            Increase the specified rectangle by the scaling factor. For example, setting the windows 
            display to 125% would multiply the X, Y, Width, and Height values by 1.25.
            </summary>
            <param name="rect">The pass by ref rectangle to apply the scaling factor increase</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowHelper.ConvertDPIToScalingFactor(System.Int32)">
            <summary>
            Convert the DPI value to a scaling factor percentage. 
            See https://technet.microsoft.com/en-us/library/dn528846.aspx for more information
            about DPI scaling on Windows
            </summary>
            <param name="dpi">The DPI obtained from the desktop DC</param>
            <returns>The scaling factor as a percent</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowList">
            <summary>
            List of windows. 
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.#ctor">
            <summary>
            Creates a new window list without a parent.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.#ctor(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Creates a new window list with a parent.
            </summary>
            <param name="parent">Window parent.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowList.WindowAdded">
            <summary>
            Fires when a window is added to the list.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowList.WindowRemoved">
            <summary>
            Fires when a window is removed from the list.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.Item(System.Int32)">
            <summary>
            Gets or sets the window at the supplied index.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Insert(System.Int32,OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Inserts the window at the specified index.
            </summary>
            <param name="index">Index at which to insert the window.</param>
            <param name="window">Window to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Contains(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Indicates if the window is contained in the list.
            </summary>
            <param name="window">Window to check for.</param>
            <returns>True if the window is in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Contains(System.IntPtr)">
            <summary>
            Indicates if the window is contained in the list.
            </summary>
            <param name="hwnd">Window to check for.</param>
            <returns>True if the window is in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Remove(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Removes the window from the list.
            </summary>
            <param name="window">Window to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.RemoveAt(System.Int32)">
            <summary>
            Removes the window from the list at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.IndexOf(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Returns the index of the window in the collection.
            </summary>
            <param name="window">Window to find.</param>
            <returns>Index of window.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Add(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Adds the window to the collection.
            </summary>
            <param name="window">Window to add.</param>
            <returns>Returns the index of the window after it is added.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.OnWindowAdded(OpenSpan.Adapters.Windows.WindowEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.OnWindowRemoved(OpenSpan.Adapters.Windows.WindowEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.GetWindowByHandle(System.IntPtr)">
            <summary>
            Gets a window by handle.
            </summary>
            <param name="hwnd">Handle.</param>
            <returns>Window.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.ToArray">
            <summary>
            Returns an array of windows.
            </summary>
            <returns>Array of windows.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.IsReadOnly">
            <summary>
            Returns true if the list is read only.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.System#Collections#IList#Item(System.Int32)">
            <summary>
            Interface implementation.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="index">Index to insert object at.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.System#Collections#IList#Remove(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Interface implemenation.
            </summary>
            <param name="value">Object to check for.</param>
            <returns>True if the list contains the object. False, otherwise.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to find.</param>
            <returns>Index of object in list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds object to list.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Index of object.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.IsFixedSize">
            <summary>
            Returns true if the list is of a fixed size.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.IsSynchronized">
            <summary>
            Returns true if the list is synchronized.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.Count">
            <summary>
            Returns a count of the number of windows in the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the list of windows into the supplied array starting
            at the specified index.
            </summary>
            <param name="array">Array to copy windows to.</param>
            <param name="index">Index to being copying.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.SyncRoot">
            <summary>
            Returns the syncroot of the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowList.IsDisposed">
            <summary>
            Returns true if the list has been disposed.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowList.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapter.ResolvePath">
            <summary>
            Set to false to prevent the designer from automatically attempting to resolve and verify the path.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapter.StartMethod">
            <summary>
            Determins how the application is started.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapter.TargetPath">
            <summary>
            Gets or sets the reference Path to the application or document.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapter.Arguments">
            <summary>
            Arguments to pass to the application or document when it is started.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapter.StartAdapter">
            <summary>
            Starts a windows adapter if it is not already running.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapter.Stop">
            <summary>
            Stops the windows adapter.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.StopMethod">
            <summary>
            Sets how OpenSpan stops the application when the Stop method is called on the adapter.
            </summary>
            <remarks>
            The options are:
            
            <b>None</b> - Stops the adapter, but leaves the process running.
            
            <b>ForceClose</b> –For each process monitored by the adapter, OpenSpan sends the message
            WM_CLOSE to each top-level window in the process and waits up to the CloseTimeout
            value for the process to exit. If the CloseTimeout is exceeded, OpenSpan leaves the
            process running.
            
            <b>SimulateClose</b> - For each process monitored by the adapter, OpenSpan sends the message
            WM_SYSCOMMAND (with parameter SC_CLOSE) to each top-level window in the process and waits
            up tp the CloseTimeout value for the process to exit. This simulates the user clicking
            the 'X’ on each form’s title bar.  If the CloseTimeout is exceeded, OpenSpan leaves
            the process running.
            
            <b>ForceCloseThenTerminate</b> - Same as ForceClose.  Additionally, if a process does not exit
            within the CloseTimeout period, OpenSpan waits up to the CloseTimeout value for the process
            to exit. When the CloseTimeout period expires, OpenSpan attempts to terminate the process
            and waits up to the TerminateTimeout value for the process to exit. If the process does not
            terminate within the TerminateTimeout it is likely hung, and OpenSpan leaves the process
            running.
            
            <b>SimulateCloseThenTerminate</b> - Similar to SimulateClose.  Additionally, if a process
            does not exit within the CloseTimeout period, OpenSpan waits up to the CloseTimeout
            value for the process to exit. When the CloseTimeout period expires, OpenSpan
            attempts to terminate the process and waits up to the TerminateTimeout value for
            the process to exit. If the process does not terminate within the TerminateTimeout
            it is likely hung, and OpenSpan leaves the process running.
            
            <b>Terminate</b> - This setting does not attempt to gracefully close the process.
            For each process monitored by the adapter, OpenSpan OpenSpan attempts to terminate
            the process immediately and waits up to the TerminateTimeout value for the process to exit.
            If the process does not terminate within the TerminateTimeout it is likely hung, and 
            OpenSpan leaves the process running.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.StartTimeout">
            <summary>
            Sets the number of milliseconds the adapter
            waits for the application to start before OpenSpan issues a timeout message.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.CloseTimeout">
            <summary>
            Specifies the amount of time, in milliseconds, to wait for the application to close
            after calling the <b>Stop</b> method.
            This property is related to the <b>StopMethod</b> property.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.SendMessageTimeout">
            <summary>
            Sets the amount of time OpenSpan waits for an acknowledgment message before sending
            the timeout message.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.TerminateTimeout">
            <summary>
            Gets or sets the amount of time before the attempts to time out are terminated.
            This property is related to the StopMethod property. 
            </summary>
            <remarks>
            For hooked child processes, every process launched from the application designated 
            in the Path property is available for interrogation. The TerminateTimeout property
            applies only to the application designated in the Path property. 
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.HideApplicationAtRuntime">
            <summary>
            When set to true, the application is hidden during project runtime.
            </summary>
            <remarks>
            To show the application, call the Show method on the adapter. 
            See the UnMatchOnHidden property to understand how hiding an application changes 
            control matching.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.SuppressForegroundWindows">
            <summary>
            Set to True to prevent an application from creating top most windows or bringing windows
            into the foreground when it is not the active application. The default is False.
            </summary>
            <remarks>
            For example, when automating a web application in the background, the application may create
            top most windows that show over the top of foreground windows disrupting user activity.
            Setting this property to True will prevent the application from creating new topmost windows,
            converting existing windows to topmost, and bringing windows into the foreground.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.IdleTimeout">
            <summary>
            Sets the amount of time before the application becomes idle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.HookChildProcesses">
            <summary>
            Set to True to enable interrogation of processes spawned from the main application.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.InjectSuspended">
            <summary>
            Set to True to inject into process started suspended by WinDbg 
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.IsStopping">
            <summary>
            Indicates whether the application is in the process of stopping.
            </summary>
            <remarks>
            IsStopping is true after the <b>Stop</b> method is called and until the application is finished
            stopping.
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.ExcludedProcesses">
            <summary>
            Use this property to identify processes that are not required by your project.
            </summary>
            <remarks>
            The ExcludeProcess OpenSpan Adapter property enables you to identify processes that are not
            required by your project  An example of using the ExcludeProcesses property is using the
            MonitorAll StartMethod and UseKeys is set to True with multiple JAVA applications running 
            on a desktop.  All the application names would be identical (JAVAW.exe); however using the
            command line match rule you have the option to exclude the applications you do not need for
            the project.
            
            Also when HookChildProcesses is set to True, OpenSpan integrates with any 
            application/process that is spawned from the application entered in the StartPage 
            (for web applications) or Path (for Windows applications). Usually you will want to use
            OpenSpan to integrate with these processes. However, in some cases a process or factory
            might be loaded that is irrelevant to your project. In these cases, you can specify any
            processes and/or factories you want OpenSpan to ignore by using an Exclude function.         
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.OpenExternalLinksInNewProcess">
            <summary>
            Forces web links opened outside of the running adapter to be opened in a new process outside of OpenSpan. Only supported in IE6 and IE7.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.IeRematchEvents">
            <summary>
            Use this property to list the Accessibility events from IE that should be used to cause a WebPage rematch.
            </summary>
            <remarks>
            These events translate into an InternetExplorerTranslatorElementChangeType.ElementAddedOrRemoved.
            See NotifyWinEventHook in the IE Translator. By default we rematch based on EVENT_OBJECT_REORDER
            and EVENT_OBJECT_VALUECHANGE but there are 15+ possible events that can be used if needed.
            https://msdn.microsoft.com/en-us/library/windows/desktop/dd318066(v=vs.85).aspx
            </remarks>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.JavaInvokeTimeout">
            <summary>
            This property only applies when automating Java applications or applets. Interactions with Java 
            targets take place on the event dispatch thread. If the event dispatch thread is busy OpenSpan will 
            wait this many milliseconds. Set to '0' to wait forever.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.WPFIdleTimeout">
            <summary>
            Sets the amount of time before the WPF UI becomes idle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.OtherWindowsAdapters">
            <summary>
            Returns a list of all windows adapters in the solution with the exception of this instance.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.StartingProcessPath">
            <summary>
            The full path to the process being started by WindowsProcess. This value is set only during the
            period when this process is being started. After that it is set to null. Since the API to start
            the process takes the path as an argument, any arbitrary process name can be used and may not
            match the Path property set on the adapter.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.ProcessDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.DriverEventService">
            <summary>
            Gets the driver event service from the service provider
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.ScoutRemotingService">
            <summary>
            Retrieves the ScoutRemotingService.  This is used to register for custom IPC messages
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.WindowsDictionary">
            <summary>
            Gets a dictionary containing windows that have been created under all processes
            within the adapter.  These are windows that have been fully processed and parented
            under the window they belong to.  This will contain all windows that are contained
            in <see cref="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.CreatedWindowsDictionary"/> minus those that have been enqueued for 
            processing by windows processes.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsAdapterBase.CreatedWindowsDictionary">
            <summary>
            Gets a dictionary containing all windows that have been created under all processes
            within the adapter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.ContainsProcess(System.Int32)">
            <summary>
            Returns whether the process id specified is monitored by the adapter.
            </summary>
            <param name="processId">Process Id</param>
            <returns>true if the process is monitored, false if not.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.Hide">
            <summary>
            Hides all processes contained in this adapter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.Show">
            <summary>
            Shows all processes contained in this adapter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetProcessById(System.Int32)">
            <summary>
            Gets a windows process by id.
            </summary>
            <param name="id">Process id.</param>
            <returns>Windows process.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetWindow(System.IntPtr)" -->
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.ExcludesProcess(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Returns whether the given process is to be excluded from hooking.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetSelectedReparentedWindow">
            <summary>
            Returns the handle of the window currently in focus in reparent mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.OnHideableWindowCreated(System.Windows.Forms.Message@)">
            <summary>
            Handles the creation of a hideable window in reparenting mode by determining whether the
            window or its parent is currrently out of focus (a non active tab in the reparenting container).
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.StartProcess(OpenSpan.Adapters.Windows.WindowsProcessStartMethod,System.String,System.String,System.String,System.String,System.Int32,OpenSpan.Adapters.Windows.IWindowsProcess@)">
            <summary>
            Starts a new windows process and adds it to the adapter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.StartProcess(OpenSpan.Adapters.Windows.WindowsProcessStartMethod,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,OpenSpan.Adapters.Windows.IWindowsProcess@)">
            <summary>
            Starts a new windows process and adds it to the adapter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.AddProcess(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.RemoveProcess(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.HandleChildProcessCreated(System.Object,OpenSpan.Adapters.Windows.WindowsProcessEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.HandleProcessCreated(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.HandleProcessDestroyed(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.UnRegisterProcess">
            <summary>
            Removes the process watch from the OpenSpan Services.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.OnDriverDetectedProcessCreation(System.String,System.UInt32,System.UInt32,System.Boolean@,System.Boolean@)">
            <summary>
            Callback used when the DriverEventService receives notice that a process was created for which this
            object registered.  At the point this method is called, the process is suspended by the driver while
            it waits for the handler to complete.  
            
            The process is injected, and when it resumes, Scout will be loaded, along with the Windows Broker.  When
            the Windows Broker starts up, it sends a message to WindowsProcess, and a new process object is created
            </summary>
            <param name="processName">The name of the process</param>
            <param name="processId">The id of the process</param>
            <param name="parentProcessId">The id of the parent process</param>
            <param name="removeProcess">Flag to the DriverEventService to remove the process.  Used when StartMethod
            is StartAndWait</param>
            <param name="injectProcess">Out param indicating if the process should be injected. If another adapter
            started the process or parent process then the monitor all adapter will not be injected.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.IsStartingStartAndWaitProcess(System.UInt32)">
            <summary>
            Checks to see if we are in the middle of starting up a StartAndWait application and the associated
            application matches the name of the specified process. For example, a StartAndWait adapter has the path
            to a jar file in the Path property and javaw.exe in the TargetPath property. When starting the adapter
            the jar file is specified as the name of the process to start in System.Diagnostics.Process. This launches
            the associated javaw.exe process which is detected by the driver. The driver notifies the adapter and
            gives it a chance to indicate whether or not injection should take place. We normally skip injection of
            processes started by an adapter so a monitor all adapter doesn't inject into a process started by another
            adapter.
            </summary>
            <param name="processId">The id of the process to test to see if it is starting up</param>
            <returns>True if the associated StartAndWait process matches the specified process, False otherwise</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetAssociatedProcess(System.String)">
            <summary>
            If the process is not an executable or batch/script file then
            this method attempts to get the name of the process associated
            with the file extension. For example, a file ending in .txt may
            return notepad.exe.
            </summary>
            <param name="fileName">The full path to the file name</param>
            <returns>The process name associated with the file, or null if not found</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.ShouldInjectProcess(System.String,System.UInt32,System.UInt32)">
            <summary>
            Tests to see if this monitor all adapter should inject into the process. We don't want to
            inject into the process under the following circumstances:
            ---------------------------------------------------------------------------------------------------- 
            1 - StartMethod=Start adapter starting process while this adapter is using MonitorAll for same process:
            
                This process was started by another adapter. The parent process would be Pega Studio or
                Runtime. The StartMethod=Start adapter would be identified as the one starting the process
                as it would store the name of the starting process to compare with the name of the process
                notification sent to the MonitorAll adapter. This would occur in the following order:
                1. StartMethod=Start adapter saves the name of the process it is about to start.
                2. StartMethod=Start adapter uses Scout API to start the process injected.
                3. Driver receives notification that the process has started and blocks while sending
                   notification of the process starting to the MonitorAll adapter.
                4. MonitorAll adapter knows not to inject into this process because the name of the
                   notification process matches the one the StartMethod=Start adapter saved.
                5. Driver returns control back to process to start injection of StartMethod=Start adapter.
                6. StartMethod=Start adapter sets the name of the process it started to null.
            
            ---------------------------------------------------------------------------------------------------- 
            2 - StartMethod=Start, HookChildProcess=True adapter causes child IE process to start and needs to hook 
                it while this MonitorAll adapter is notified of child IE process starting:
            
                This process is a child or descendant of a process that was started by another adapter
                configured with HookChildProcess set to true. The parent process should be injected by
                the other adapter, not this one.
            ---------------------------------------------------------------------------------------------------- 
            3 - This MonitorAll adapter has already hooked the parent IE process and has HookChildProcess
                set to true while this same adapter gets notified that a child IE process is starting:
            
                This process is a child or descendant of this monitor all process configured with 
                HookChildProcess set to true. This MonitorAll adapter gets notified that the parent process 
                is starting. It injects into the process and sends the HookChildProcess=True indicator to
                the process. The child IE process starts and the driver sends notification to this adapter.
                This adapter knows to not inject into the child process at this time. The child process
                continues starting and knows it should be injected because of the HookChildProcess=True
                indicator.
            ----------------------------------------------------------------------------------------------------
            
            In most situations we want to hook into the process. The only exceptions are the ones listed
            above. It is worth pointing out some special situations where we need special logic to know
            that we should hook the process: 
            ----------------------------------------------------------------------------------------------------
            1 - A StartAndWait adapter has a jar file in the Path property and java.exe in the Target. The
                StartAndWait adapter is notified that java.exe is starting:
            
                Launching the jar file causes the associated process to start resulting in Studio or Runtime
                being the parent process of java.exe. This adapter needs to inject into java.exe even though
                the process was started by Studio or Runtime.
            ----------------------------------------------------------------------------------------------------  
            2 - An automation uses Sytem.Diagnostics.Process to start a process. A MonitorAll adapter is notified
                that the process has started.
            
                The MonitorAll adapter needs to inject into the process even though the parent is Runtime.
            ----------------------------------------------------------------------------------------------------
            3 - A StartMethod=Start adapter starts IE with HookChildProcess set to false. The MonitorAll adapter
                is notified that the parent IE process has started as well as the child IE process.
            
                The MonitorAll adapter will not inject into the parent process but will inject into the
                child process. One adapter can start and hook a parent process while another adapter hooks a 
                child process that it is monitoring. This is a very unlikely scenario.
            </summary>
            <param name="processName">The name of the process that is starting</param>
            <param name="processId">The id of the process that is started</param>
            <param name="parentProcessId">The id of the parent process</param>
            <returns>True if injection should occur, false otherwise</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetAdaptersForRuntime">
            <summary>
            Populates a list of all windows adapters in the solution with the exception of this instance. This method
            is for runtime only since it requires a different service than for design time. This collection can be
            cached since the design components don't change at runtime.
            </summary>
            <returns>A list of all the runtime windows adapter in the solution or an empty list</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetAdaptersForDesignMode">
            <summary>
            Populates a list of all windows adapters in the solution with the exception of this instance. This method
            is for design time only since it requires a different service than for runtime. The design time service
            allows you to directly request components of a specific type (IWindowsAdapter). The collection can not
            be cached since adapters may be added or removed at design time.
            </summary>
            <returns>A list of all the design windows adapter in the solution or an empty list</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.IsParentHookingChildren(OpenSpan.Adapters.Windows.WindowsAdapterBase,System.String,System.UInt32,System.UInt32)">
            <summary>
            For the specified Windows adapter, tests to see if the parent process is being tracked and HookChildProcess 
            is set to true.
            </summary>
            <param name="windowsAdapter">The WindowsAdapterBase instance to check</param>
            <param name="processName">The name of the child process (for logging purposes only)</param>
            <param name="processId">The id of the child process (for logging purposes only)</param>
            <param name="parentProcessId">The id of the parent process</param>
            <returns>True if the tracked parent process will be hooking child processes, false otherwise</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.IsSameProcess(System.String,System.String)">
            <summary>
            Returns true if the processPath name matches the process name. It gets the name of the process
            without the extension and does a case insensitive comparison to the actual process name. For example,
            C:\Program Files (x86)\Java\jre1.8.0_91\bin\Javaw.exe == javaw
            </summary>
            <param name="processName">The name of the process without .exe on the end</param>
            <param name="processPath">The path to the process to compare to</param>
            <returns>True if the stripped process name from the path matches the specified name</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.CreateActivityIntelligenceEventsReceiver">
            <summary>
            Create a singleton that receives all AI generic events from injected processes.  Multiple calls
            to this method, after the first one, have no effect
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetTargets(OpenSpan.Adapters.IControl)">
            <summary>
            The Windows adapter implements ITargetProvider to expose the top level targets
            (such as processes, target factories, and global web pages). 
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetTargetsFromFactories(OpenSpan.Adapters.IControl)">
            <summary>
            *Note* This property or method is not intended for public use.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.GetAllFactoriesAndClones(OpenSpan.Adapters.Windows.WindowsAdapterBase)">
            <summary>
            Enumerator which returns all the target factories and their clones that are contained
            within the given adapter.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a Windows API PostMessage() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a Windows API PostMessage() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.PostMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Performs a Windows API PostMessage() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Performs a Windows API PostMessage() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a Windows API SendMessageTimeout() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Performs a Windows API SendMessageTimeout() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Performs a Windows API SendMessageTimeout() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Performs a Windows API SendMessageTimeout() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Performs a Windows API SendMessageTimeout() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Performs a Windows API SendMessageTimeout() call to the specified window.
            </summary>
            <param name="hwnd"></param>
            <param name="message"></param>
            <param name="wparam"></param>
            <param name="lparam"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.ParseStringAdvancedConfiguration(System.String,System.String@)">
            <summary>
            Gets the string value for the specified AdvancedConfiguration key
            </summary>
            <param name="key">The JSON Key</param>
            <param name="value">The JSON Value</param>
            <returns>True if we succeed in getting the Value, false otherwise</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsAdapterBase.FireAdapterLostFocus(System.Int64)">
            <summary>
            Fires off an AdapterLostFocus event with the given duration.
            </summary>
            <param name="duration">The duration (in milliseconds) the adpater was focused.</param>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsCommonControls">
            <summary>
            Enumeration of common Windows controls
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModule.ParentTarget">
            <summary>
            Returns the parent target as an ITarget.
            </summary>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsModuleList">
            <summary>
            Wrapper around the list of modules
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleList.Item(System.Int32)">
            <summary>
            Gets or sets the module at the supplied index.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.GetByHandle(System.UInt64)">
            <summary>
            Gets or sets the module at the supplied index.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.Insert(System.Int32,OpenSpan.Adapters.Windows.IWindowsModule)">
            <summary>
            Inserts the module at the specified index.
            </summary>
            <param name="index">Index at which to insert the module.</param>
            <param name="module">WindowsModule to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.Contains(OpenSpan.Adapters.Windows.IWindowsModule)">
            <summary>
            Indicates if the module is contained in the list.
            </summary>
            <param name="module">WindowsModule to check for.</param>
            <returns>True if the module is in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.Contains(System.UInt64)">
            <summary>
            Indicates if the module is contained in the list.
            </summary>
            <param name="module">WindowsModule to check for.</param>
            <returns>True if the module is in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.Remove(OpenSpan.Adapters.Windows.IWindowsModule)">
            <summary>
            Removes the module from the list.
            </summary>
            <param name="module">WindowsModule to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.Remove(System.UInt64)">
            <summary>
            Removes the module from the list.
            </summary>
            <param name="module">WindowsModule to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.RemoveAt(System.Int32)">
            <summary>
            Removes the module from the list at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.IndexOf(OpenSpan.Adapters.Windows.IWindowsModule)">
            <summary>
            Returns the index of the module in the collection.
            </summary>
            <param name="module">WindowsModule to find.</param>
            <returns>Index of module.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.Add(OpenSpan.Adapters.Windows.IWindowsModule)">
            <summary>
            Adds the module to the collection.
            </summary>
            <param name="module">WindowsModule to add.</param>
            <returns>Returns the index of the module after it is added.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleList.IsReadOnly">
            <summary>
            Returns true if the list is read only.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleList.System#Collections#IList#Item(System.Int32)">
            <summary>
            Interface implementation.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="index">Index to insert object at.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.System#Collections#IList#Remove(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Interface implemenation.
            </summary>
            <param name="value">Object to check for.</param>
            <returns>True if the list contains the object. False, otherwise.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to find.</param>
            <returns>Index of object in list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds object to list.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Index of object.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleList.IsFixedSize">
            <summary>
            Returns true if the list is of a fixed size.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleList.IsSynchronized">
            <summary>
            Returns true if the list is synchronized.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleList.Count">
            <summary>
            Returns a count of the number of modules in the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the list of modules into the supplied array starting
            at the specified index.
            </summary>
            <param name="array">Array to copy modules to.</param>
            <param name="index">Index to being copying.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsModuleList.SyncRoot">
            <summary>
            Returns the syncroot of the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsModuleList.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.WindowsDictionary">
            <summary>
            Gets a dictionary containing windows that have been created under all processes
            within the adapter.  These are windows that have been fully processed and parented
            under the window they belong to.  This will contain all windows that are contained
            in <see cref="P:OpenSpan.Adapters.Windows.WindowsProcess.CreatedWindowsDictionary"/> minus those in <see cref="P:OpenSpan.Adapters.Windows.WindowsProcess.EnqueuedWindowsDictionary"/>.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.EnqueuedWindowsDictionary">
            <summary>
            Dictionary containing windows that were created while matching was occurring.  Windows
            added here will be moved to the <see cref="P:OpenSpan.Adapters.Windows.WindowsProcess.CreatedWindowsDictionary"/> after matching 
            is finished.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.CreatedWindowsDictionary">
            <summary>
            Gets a dictionary containing all windows that have been created under all processes
            within the adapter.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.HideApplication">
            <summary>
            Determines whether the application hides at startup at runtime.
            This value is passed through to Scout in the HandleProcessCreated event handler.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.HookChildProcesses">
            <summary>
            Determines whether to hook child processes that are started under this process.
            This value is passed through to Scout in the HandleProcessCreated event handler.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.InjectSuspended">
            <summary>
            Determines whether to inject into suspended process.
            Injection will use Scout.DirectInjection API using Process ID of existing running process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.HookConsole">
            <summary>
            Determines whether checking and hooking of the console should be done.
            This value is passed through in the HandleProcessCreated event handler.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.SuppressForegroundWindows">
            <summary>
            Gets or sets whether the application should be prevented from creating topmost windows
            and bringing windows into the foreground.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Standalone">
            <summary>
            Used to indicate that this class is not being used by the Windows adapter and can bypass some functionality specific to it.
            It is set in the constructors, but can also be set using the property.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.ReparentApplication">
            <summary>
            Gets or sets whether the application should be reparented at runtime.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Is64Bit">
            <summary>
            Returns true if this is a native 64 bit process, or false if this is a Wow64 process (64 bit Windows)
            or a native 32 bit process (32 bit Windows)
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.TargetFactoryService">
            <summary>
            Gets the target factory service from the service provider.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.TargetEnvironmentService">
            <summary>
            Gets the runtime host service from the service provider.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.ScoutRemotingService">
            <summary>
            Retrieves the ScoutRemotingService.  This is used to register for custom IPC messages
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.ParentTarget">
            <summary>
            Returns the parent target as an ITarget.
            *Note* This property or method is not intended for public use.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.MessageWindowAnscestor">
            <summary>
            Caches the message only window ancestor (parent).
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.SetStartingProcessPath(System.String)">
            <summary>
            Sets the full path to the process being started by WindowsProcess. This could either be the
            StartAndWait process or the regular Start process. This value is set only during the period 
            when this process is being started. After that it is set to null. Since the API to start the 
            process takes the path as an argument, any arbitrary process name can be used and may not
            match the Path property set on the adapter.
            </summary>
            <param name="path">The full path to the process being started by WindowsProcess</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.#ctor(System.Boolean)">
            <summary>
            This constructor is used only when using the WindowsProcess in "standalone" mode (as the Console adapter does).  In standalone
            mode, functions required by the WindowsAdapterBase are bypassed (such as window creation).  This mode is used
            when this class is needed to wrap the process of starting an application and injecting into it.  WindowsProcess does NOT
            have to be sited when using standalone mode.
            </summary>
            <param name="designMode">The design mode of the owning design component.  If HideApplication is true, then when designMode is true
            the application will not be hidden, and if designMode is false, the application will be hidden</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.#ctor">
            <summary>
            The default constructor is used by WindowsAdapterBase to create a new WindowsProcess.  WindowsProcess must be sited and have
            IWindowsAdapter available as a service to function correctly.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.ResponseWindow">
            <summary>
            Returns the response window handle
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Site">
            <summary>
            Overrides the site implementation.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Adapter">
            <summary>
            Gets the adapter containing the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Handle">
            <summary>
            Gets the process handle.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.ServiceProvider">
            <summary>
            Gets the service provider for the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.ServiceContainer">
            <summary>
            Gets the service container;
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.HasExited">
            <summary>
            Gets a boolean indicating if the process has been disposed.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Pid">
            <summary>
            Gets the process ID.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Modules">
            <summary>
            Gets the list of process modules.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Name">
            <summary>
            Gets the name of the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Parent">
            <summary>
            Gets the parent process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Path">
            <summary>
            Gets the path of the executable.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Processes">
            <summary>
            Gets a list of child processes.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.SubProcesses">
            <summary>
            Gets all sub-processes contain in the process tree under this process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.Windows">
            <summary>
            Gets the list of top-level windows hosted by the process.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.FilteredWindows">
            <summary>
            Gets the list of top-level non-desktop windows hosted by the process.
            </summary>
            <remarks>
            Added to allow reparenting of filtered windows. Previously HandleCreateWindow
            simply didn't create a window if it was a message only window, top-level child or
            belonged to another desktop. However, in a test program we encountered a scenario
            where the following occured:
            1. CreateWindow(parent) failed - invalid desktop.
            2. CreateWindow(child) failed - invalid desktop.
            3. ReparentWindow(parent)
            4. CreateWindow(parent).
            5. Child never created because it was filtered out in create window.
            Now, filtered windows are stored in a separate list and are available for reparenting.
            If a top level filtered window is reparented under the desktop, it and all its children
            will become part of the hierarchy. Filtered windows cannot be viewed in the user interface.
            </remarks>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.GetAllWindowsInProcess">
            <summary>
            Gets a list of all the windows in this list that belong to the process, even
            if they are parented under another process.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.RegisterTargetFactory(OpenSpan.Adapters.ITargetFactory)">
            <summary>
            Registers the specified target factory with this Windows Process.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.UnregisterTargetFactory(OpenSpan.Adapters.ITargetFactory)">
            <summary>
            Unregister the specified target factory with this Windows Process.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.RegisterOleMessageFilter">
            <summary>
            Calls on the MonitorThread's RegisterOleMessageFilter implementation which
            manages the lifetime of the registration within the invocation context.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.ModuleLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.Idle">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.Destroyed">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.ChildProcessCreated">
            <summary>
            Raised when the monitor attaches to a process.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.Created">
            <summary>
            Raised when the monitor attaches from a process.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.CustomMessageReceived">
            <summary>
            Raised when a custom message is received.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.WindowCreated">
            <summary>
            Raised when a window is created.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.WindowDestroyed">
            <summary>
            Raised when a window is destroyed.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.WindowsMessageReceived">
            <summary>
            Raised when a windows messages is received.
            </summary>
        </member>
        <member name="E:OpenSpan.Adapters.Windows.WindowsProcess.WindowsMessageProcessed">
            <summary>
            Raise when a windows message is processed.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcess.InvokeRequired">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.EndInvoke(System.IAsyncResult)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.Invoke(System.Delegate,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.RaiseException(System.Exception)">
            <summary>
            Raises an exception. Does not try to invoke to another thread.
            </summary>
            <param name="ex">Exception to raise.</param>
            <returns>True, if the user stops the adapter</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.InjectAndResumeProcess(System.String,System.String,System.String,System.UInt32@)">
            <summary>
            Used by the normal Start method to inject Scout into the process while the process is in a suspended
            state. The process can then be resumed to finish its normal startup.
            </summary>
            <param name="path">The full path to the process to be started and injected</param>
            <param name="args">The arguments to the starting process</param>
            <param name="dir">The working directory where the process resides</param>
            <param name="pid">A ref parameter set to the process Id after it has started</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.VerifyString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.CleanString(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.StartMonitorThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.GetIdleChange(OpenSpan.Adapters.Windows.IWindowsMessage)">
            <summary>
            Gets the type of change associated with the message
            </summary>
            <param name="wm"></param>
            <returns>Type of change</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.ProcessMessageQueue">
            <summary>
            Processes all the messages currently in the message queue.
            </summary>
            <returns>
            True if a window was created or re-parents, or false otherwise.  True
            means that there is a control that needs to be re-matched the next
            time the Idle event occurs.
            </returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.HandleAdapterRequest(System.Windows.Forms.Message@)">
            <summary>
            A Translator needs something from the Adapter associated with this WindowsProcess.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.ProcessPendingReparenting">
            <summary>
            This method will be invoked during HandleSetParent() and called at the beginning of DestroyWindow(). It 
            will process any windows waiting to be reparented and clear the PendingReparentingQueue.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.CreateTarget(System.Type,OpenSpan.Adapters.ITarget)">
            <summary>
            *Note* This property or method is not intended for public use.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.IsMessageOnlyWindow(OpenSpan.Adapters.Windows.IWindow)">
            <summary>
            Checks if the window is a message only window.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.OnWindowCreated(OpenSpan.Adapters.Windows.WindowEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.OnWindowDestroyed(OpenSpan.Adapters.Windows.WindowEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.GetWindow(System.IntPtr)">
            <summary>
            Gets a window by handle.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Window.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.HandleProcessCreated(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.Create(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Attaches the native process.
            </summary>
            <param name="pid">Id of process.</param>
            <param name="commandLine">Command line of the process.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.OnCreated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.OnChildProcessCreated(OpenSpan.Adapters.Windows.WindowsProcessEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.ResetIdle(OpenSpan.Adapters.IdleChange)">
            <summary>
            Method to reset idle timer. Call this method when an event has occured that should delay the Idle event
            such as hierarchy changes, visibility changes, etc.
            </summary>
            <param name="change">IdleChange parameter that describes what type of event was received.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.OnIdle(OpenSpan.Adapters.IdleChange)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.OnDestroyed(System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.ExitCallback(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <param name="timedOut"></param>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsProcess.WindowsProcessWaitHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcess.LoadTranslators(System.Collections.Generic.ICollection{OpenSpan.Adapters.ITargetFactory},System.Boolean)">
            <summary>
            Creates the shared memory structure used to convey the list of translators to load
            </summary>
            <returns>Handle to shared memory, or INVALID_MEMORY if there are no translators to load</returns>
        </member>
        <member name="T:OpenSpan.Adapters.Windows.WindowsProcessList">
            <summary>
            List of processes.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.#ctor">
            <summary>
            Creates a new process list without a parent.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.#ctor(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Creates a new process list with a parent.
            </summary>
            <param name="parent">WindowsProcess parent.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessList.Item(System.Int32)">
            <summary>
            Gets or sets the process at the supplied index.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.Insert(System.Int32,OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Inserts the process at the specified index.
            </summary>
            <param name="index">Index at which to insert the process.</param>
            <param name="process">WindowsProcess to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.Contains(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Indicates if the process is contained in the list.
            </summary>
            <param name="process">WindowsProcess to check for.</param>
            <returns>True if the process is in the list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.Remove(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Removes the process from the list.
            </summary>
            <param name="process">WindowsProcess to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.RemoveAt(System.Int32)">
            <summary>
            Removes the process from the list at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.IndexOf(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Returns the index of the process in the collection.
            </summary>
            <param name="process">WindowsProcess to find.</param>
            <returns>Index of process.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.Add(OpenSpan.Adapters.Windows.IWindowsProcess)">
            <summary>
            Adds the process to the collection.
            </summary>
            <param name="process">WindowsProcess to add.</param>
            <returns>Returns the index of the process after it is added.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.ToArray">
            <summary>
            Copies the processes within this list into a new array. 
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessList.IsReadOnly">
            <summary>
            Returns true if the list is read only.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessList.System#Collections#IList#Item(System.Int32)">
            <summary>
            Interface implementation.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="index">Index to insert object at.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.System#Collections#IList#Remove(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to remove.</param>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to check for.</param>
            <returns>True if the list contains the object. False, otherwise.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Interface implementation.
            </summary>
            <param name="value">Object to find.</param>
            <returns>Index of object in list.</returns>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds object to list.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Index of object.</returns>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessList.IsFixedSize">
            <summary>
            Returns true if the list is of a fixed size.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessList.IsSynchronized">
            <summary>
            Returns true if the list is synchronized.
            </summary>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessList.Count">
            <summary>
            Returns a count of the number of processes in the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the list of processes into the supplied array starting
            at the specified index.
            </summary>
            <param name="array">Array to copy processes to.</param>
            <param name="index">Index to being copying.</param>
        </member>
        <member name="P:OpenSpan.Adapters.Windows.WindowsProcessList.SyncRoot">
            <summary>
            Returns the syncroot of the list.
            </summary>
        </member>
        <member name="M:OpenSpan.Adapters.Windows.WindowsProcessList.GetEnumerator">
            <summary>
            Gets the enumerator for the list.
            </summary>
            <returns>Enumerator.</returns>
        </member>
    </members>
</doc>
